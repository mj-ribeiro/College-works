plot(abs(rnorm(30,0,1)), col='gray', lwd=19, size=3)
plot(abs(rnorm(30,0,1)), col='gray', lwd=19)
curve((0.1*x), add=T)
plot(abs(rnorm(30,0,1)), col='gray', lwd=19)
curve((0.1*x), add=T, col='red')
curve(dnorm(x))
curve(dnorm(x), xlim=c(-1,1))
curve(dnorm(x), xlim=c(-3,3))
curve(dnorm(x), xlim=c(-4,4))
curve(dnorm(x), xlim=c(-6,6))
curve(dnorm(x), xlim=c(-8,8))
write.csv(ret, 'ret')
write.table(ret, 'ret')
write.xlsx(ret, 'ret')
library(xlsx)
write.xlsx(ret, 'ret')
write.xlsx(ret, 'c:/ret.xlsx')
write.xlsx(ret,"C:/Users/user/Documents/ret.xlsx")
spec2 = ugarchspec(variance.model=list(model="sGARCH",
garchOrder=c(1,1)),
mean.model=list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model="norm")
garch3 = ugarchfit(spec = spec2, data= ret)
garch3
spec1 = ugarchspec(variance.model=list(model="fGARCH",
garchOrder=c(1,1), submodel='TGARCH'),
mean.model=list(armaOrder=c(0,0), include.mean=TRUE, archm=T),
distribution.model="norm")
garch2 = ugarchfit(spec = spec1, data= ret)
garch2
sd(ret)
library(sn)
curve(dsn(x))
curve(dsn(x), ylim=c(-8,8))
curve(dsn(x), ylim=c(0,8))
curve(dsn(x, xi = 2), ylim=c(0,8))
curve(dsn(x, xi = 2, omega = 0.2, alpha = 0.22), ylim=c(0,8))
curve(dsn(x, xi = 2, omega = 0.2, alpha = 0.22))
curve(dsn(x, xi = 22, omega = 0.2, alpha = 0.22))
curve(dsn(x, omega = 0.2, alpha = 0.22))
curve(dsn(x, omega = 3, alpha = 0.22))
curve(dsn(x, omega = 8, alpha = 0.22))
curve(dsn(x, omega = 8, alpha = 0.22), , ylim=c(0,8))
curve(dsn(x, omega = 8, alpha = 0.22), , ylim=c(-8,8))
curve(dsn(x, omega = 8, alpha = 0.22), , ylim=c(0,8))
curve(dsn(x, omega = 8, alpha = 0.22), , ylim=c(0,0.8))
curve(dsn(x, omega = 8, alpha = 0.22))
curve(dsn(x, omega = 0.11, alpha = 0.22))
curve(dsn(x, omega = 0.21, alpha = 0.22))
curve(dsn(x, omega = 0.41, alpha = 0.22))
curve(dsn(x, omega = 0.1, alpha = 0.22))
curve(dsn(x, omega = 0.1, alpha = 2))
curve(dsn(x, omega = 0.1, alpha = 10))
curve(dsn(x, omega = 0.1, alpha = 100))
curve(dsn(x, omega = 0.1, alpha = 0.011))
curve(dst(x, omega = 0.1, alpha = 0.011))
curve(dst(x, omega = 1, alpha = 0.011))
curve(dst(x, omega = 1, alpha = 0.11))
curve(dst(x, omega = 1, alpha = 11))
curve(dst(x, omega = 0.9, alpha = 11))
curve(dst(x, omega = 0.11, alpha = 11))
curve(dst(x, omega = 0.11, alpha = 0.11))
rst(x, omega = 0.11, alpha = 0.11))
rst(100, omega = 0.11, alpha = 0.11))
rst(100, omega = 0.11, alpha = 0.11)
rst(100, omega = 0.2, alpha = 0.11, xi = 2)
rst(100, omega = 0.2, alpha = 0.11, xi = 0)
rst(100, omega = 0.2, alpha = 0.11, xi = 0, nu = 2)
sin(30)
sin(30Â°)
sin(30)
sin(pi/6)
tan(pi/6)
curve(sin(x))
curve(sin(x), xlim = c(-3,3))
curve(sin(x), xlim = c(-30,30))
curve(sin(x), xlim = c(-10,10))
line(h=0)
aline(h=0)
abline(h=0)
curve(tan(x), xlim = c(-10,10))
curve(tan(x), xlim = c(-10,10))
abline(h=0)
curve((x), xlim = c(-10,10))
abline(v=0)
curve((x), xlim = c(0,10))
abline(v=0)
abline(v=10)
curve((x), xlim = c(0,10))
abline(v=10)
atan(1)
atan(pi)
pi/4
tan(pi/3)
tan(2*pi/3)
fd = function(x, alpha){
disf = exp(-x^alpha)
}
fd(2, 1)
fd = function(x, alpha){
disf = exp(-x^alpha)
return(disf)
}
fd(2, 1)
fd(0.2, 1)
curve(fd(x, 1))
curve(fd(x, 1), xlim = c(-10,10))
fd = function(x, alpha){
disf = exp(-x^(-alpha))
return(disf)
}
curve(fd(x, 1), xlim = c(-10,10))
curve(fd(x, 1), xlim = c(0,10))
curve(fd(x, 1), xlim = c(0,4))
install.packages('Rtolls40')
install.packages('Rtolls')
library(installr)
updateR()
updateR()
install.packages('Rtolls')
install.packages(c("fGarch", "forecast", "installr", "quantmod", "rugarch", "timeSeries", "tseries", "vars", "xlsx"))
install.packages('Rtolls')
install.packages('Rtolls40')
install.packages('rtolls40')
curve(x^0.4)
curve(x^0.4, ylim = c(0, 4))
curve(x^0.4, ylim = c(0, 1))
curve(x^0.2, ylim = c(0, 1))
curve(x^0.1, ylim = c(0, 1))
curve(x^0.01, ylim = c(0, 1))
curve(x^0.001, ylim = c(0, 1))
curve(x^0.1, ylim = c(0, 1))
curve(x^1, ylim = c(0, 1))
curve(x^0.1, ylim = c(0, 1))
curve(x^0.2, ylim = c(0, 1))
curve(x^0.4, ylim = c(0, 1), add=T)
install.packages("knitr")
install.packages("readxl")
# Defining my work diretory
setwd("C:/Users/user/Downloads/ML_work/Algorithm")
library(readxl)
teste <- read_excel("teste.xlsx")
teste$foot = NULL
df2 = teste[,'sex']
teste[,'sex']=NULL
teste$sex = df2
teste = data.frame(teste)
#--- function
naive_marcos2 = function(k, df){
df = as.data.frame(df)
#fator =  factor(df[,k])
a = prop.table(table(df[ ,k]))
ta = length(a)
nm = rownames(a)
print('Marcos Naive Bayes Classifier for Discrete Predictors')
cat('A-priori probabilities:\n')
#df2 = df[ , k]
print(a)
#df[ ,k] = NULL
#col_n = colnames(df)
#df[,k] = df2
M = array(0, dim = c(2,2, ta))
m = matrix(0, 2, 2)
for(g in 1:ta){
m1 = as.matrix(tapply(df[,1], df[,k], mean)[g])
v1 = as.matrix(tapply(df[,1], df[,k], sd)[g])
m2 = tapply(df[,2], df[,k], mean)[g]
v2 = tapply(df[,2], df[,k], sd)[g]
m = matrix(c(m1, m2, v1, v2)  )
M[, ,g] = m
cat(nm[g], '\n')
print(M[, ,g])
}
return(M)
}
cc = naive_marcos2('sex', teste)
library(readxl)
teste <- read_excel("teste.xlsx")
setwd("C:/Users/user/Downloads/ML_work/Algorithm")
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/Git projects/college_works/ML_1")
library(knitr)
library(kableExtra)
#options(kableExtra.latex.load_packages = FALSE)
library(magrittr)
knitr:: kable(a, booktabs = T) %>%kable_styling(full_width = T) %>%
column_spec(1, width = "8cm")
library(magrittr)
knitr::kable(a)
library(tinytex)
remove.packages("tinytex", lib="~/R/win-library/4.0")
install.packages('tinytex')
setwd("D:/Git projects/college_works/ML_1")
source("D:/Git projects/college_works/ML_1/Nbayes2_work.R")
library(e1071)
clas2 = naiveBayes(x=df[-3], y = as.factor(df$risco))
prev2 = predict(clas2, newdata = df_teste)
print(prev2)
prev2 = predict(clas2, newdata = df_teste, 'raw')
print(prev2)
prev2 = predict(clas2, newdata = df_teste)
print(prev2)
prev2 = as.factor(prev2)
print(prev2)
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library('AppliedPredictiveModeling')
library(RColorBrewer)
View(census)
trc = census[1:28000, ]
tstc = census[28001:30162, ]
clas2 = naiveBayes(x=trc[-3], y = as.factor(trc$income))
prev2 = predict(clas2, newdata = tstc)
prev2 = as.factor(prev2)
print(prev2)
nbp <- 250;
PredA <- seq(min(tstc$education), max(tstc$education), length = nbp)
PredB <- seq(min(tstc$occupation), max(tstc$occupation), length = nbp)
Grid <- expand.grid(PredictorA = PredA, PredictorB = PredB)
nbp <- 250;
PredA <- seq(min(tstc$education), max(tstc$education), length = nbp)
census$education = factor(census$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
census$income = factor(census$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
census$occupation = factor(census$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
trc = census[1:28000, ]
tstc = census[28001:30162, ]
clas2 = naiveBayes(x=trc[-3], y = as.factor(trc$income))
prev2 = predict(clas2, newdata = tstc)
prev2 = as.factor(prev2)
print(prev2)
PredA <- seq(min(tstc$education), max(tstc$education), length = nbp)
View(find2)
trc2 = find2[1:210, ]
tstc2 = census[210:231, ]
clas3 = naiveBayes(x=trc2[-1], y = as.factor(trc2$x))
prev3 = predict(clas3, newdata = tstc2)
prev3 = as.factor(prev2)
print(prev2)
print(prev3)
prev3 = as.factor(prev3)
print(prev3)
print(prev3)
clas3 = naiveBayes(x=trc2[-1], y = as.factor(trc2$x))
prev3 = predict(clas3, newdata = tstc2)
prev3
clas3 = naiveBayes(x=trc2[-1], y = trc2$x)
prev3 = predict(clas3, newdata = tstc2)
clas3 = naiveBayes(x=trc2[-1], y = trc2$x)
prev3 = predict(clas3, newdata = tstc2[-1])
View(tstc)
prev2 = predict(clas2, newdata = tstc[-3])
clas3 = naiveBayes(x=trc2[-1], y = trc2$x)
prev3 = predict(clas3, newdata = tstc2[-1])
str(trc2)
str(tstc2)
trc2 = find2[1:210, ]
tstc2 = find2[210:231, ]
clas3 = naiveBayes(x=trc2[-1], y = trc2$x)
prev3 = predict(clas3, newdata = tstc2[-1])
prev3 = as.factor(prev3)
print(prev3)
prev3
prev3 = predict(clas3, newdata = tstc2[-1])
prev3
clas3 = naiveBayes(x=trc2[-1], y = as.factor(trc2$x))
prev3 = predict(clas3, newdata = tstc2[-1])
prev3
print(prev3)
PredA <- seq(min(find2$oil), max(find2$oil), length = nbp)
PredB <- seq(min(find2$pca), max(find2$pca), length = nbp)
Grid <- expand.grid(PredictorA = PredA, PredictorB = PredB)
regions = ggplot(data = prev3, aes(x = PredictorA, y = PredictorB,
color = x))
library(ggplot2)
regions = ggplot(data = prev3, aes(x = PredictorA, y = PredictorB,
color = x)) +
geom_tile(data = cbind(Grid, classes = predict(lda_fit,Grid)$class), aes(fill = classes)) +
scale_fill_manual(name = 'classes', values = twoClassColor) +
ggtitle("Decision region") + theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'classes', values = twoClassColor)
regions = ggplot(data = prev3, aes(x = PredictorA, y = PredictorB,
color = x))
regions = ggplot(data = find2, aes(x = PredictorA, y = PredictorB,
color = x))
regions
Grid <- expand.grid(PredictorA = PredA, PredictorB = PredB)
regions = ggplot(data = find2, aes(x = PredictorA, y = PredictorB,
color = x)) +
geom_tile(data = cbind(Grid, classes = predict(lda_fit,Grid)$class), aes(fill = classes)) +
scale_fill_manual(name = 'classes', values = twoClassColor) +
ggtitle("Decision region") + theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'classes', values = twoClassColor)
mutate
clas3 = naiveBayes(x=find2[-1], y = as.factor(find2$x))
fits = mutate(find2, prev3 = predict(clas3, newdata = find2[-1]) )
library(plyr)
fits = mutate(find2, prev3 = predict(clas3, newdata = find2[-1]) )
View(fits)
nbp <- 250;
PredA <- seq(min(find2$oil), max(find2$oil), length = nbp)
PredB <- seq(min(find2$pca), max(find2$pca), length = nbp)
Grid <- expand.grid(PredictorA = PredA, PredictorB = PredB)
regions = ggplot(data = fits, aes(x = PredictorA, y = PredictorB,
color = x))
regions
Grid <- expand.grid(oil = PredA, pca = PredB)
regions = ggplot(data = fits, aes(x = oil, y = pca,
color = x))
regions
regions = ggplot(data = fits, aes(x = `oil`, y = `pca`,
color = `x`))
regions
View(fits)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x))
regions
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) + geom_point()
regions
#------ finance
twoClassColor <- brewer.pal(3,'Set1')[1:2]
names(twoClassColor) <- c('Class1','Class2')
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x))
+ geom_tile(data = cbind(Grid, classes = predict(cl3,Grid)$x), aes(fill = x)) +
scale_fill_manual(name = 'classes', values = twoClassColor) +
ggtitle("Decision region") + theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'classes', values = twoClassColor)
show(regions)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x))
+ geom_tile(data = cbind(Grid, classes = predict(class3,Grid)$x), aes(fill = x)) +
scale_fill_manual(name = 'classes', values = twoClassColor) +
ggtitle("Decision region") + theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'classes', values = twoClassColor)
show(regions)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x))
+ geom_tile(data = cbind(Grid, classes = predict(clas3,Grid)$x), aes(fill = x)) +
scale_fill_manual(name = 'classes', values = twoClassColor) +
ggtitle("Decision region") + theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'classes', values = twoClassColor)
show(regions)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x))
+ geom_tile(data = cbind(Grid, x = predict(clas3,Grid)$class), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") + theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'x', values = twoClassColor)
show(regions)
predict(clas3,Grid)$class
predict(clas3,Grid)
a = predict(clas3,Grid)
Grid <- expand.grid(oil = PredA, pca = PredB)
PredA <- seq(min(find2$oil), max(find2$oil), length = nbp)
PredB <- seq(min(find2$pca), max(find2$pca), length = nbp)
Grid <- expand.grid(oil = PredA, pca = PredB)
a = predict(clas3,Grid)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x))
+ geom_tile(data = cbind(Grid, x = predict(clas3,Grid)), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") + theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'x', values = twoClassColor)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = predict(clas3,Grid)), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") + theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'x', values = twoClassColor)
regions
show(regions)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = predict(clas3,Grid)), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'x', values = twoClassColor)
show(regions)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = predict(clas3,Grid)), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor)
regions
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'x', values = twoClassColor)
show(regions)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10))
show(regions)
names(twoClassColor) <- c('Class1','Class2')
#------ finance
twoClassColor <- brewer.pal(3,'Set1')[1:2]
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'x', values = twoClassColor)
show(regions)
twoClassColor <- brewer.pal(3,'Set1')[1:2]
names(twoClassColor) <- c('Class1','Class2')
library(plyr)
clas3 = naiveBayes(x=find2[-1], y = as.factor(find2$x))
fits = mutate(find2, prev3 = predict(clas3, newdata = find2[-1]) )
nbp <- 250;
PredA <- seq(min(find2$oil), max(find2$oil), length = nbp)
PredB <- seq(min(find2$pca), max(find2$pca), length = nbp)
Grid <- expand.grid(oil = PredA, pca = PredB)
a = predict(clas3,Grid)
library(ggplot2)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'x', values = twoClassColor)
show(regions)
twoClassColor <- brewer.pal(3,'Set1')[1:2]
names(twoClassColor) <- c('Class1','Class2')
clas3 = naiveBayes(x=find2[-1], y = as.factor(find2$x))
fits = mutate(find2, prev3 = predict(clas3, newdata = find2[-1]) )
nbp <- 250;
PredA <- seq(min(find2$oil), max(find2$oil), length = nbp)
PredB <- seq(min(find2$pca), max(find2$pca), length = nbp)
Grid <- expand.grid(oil = PredA, pca = PredB)
a = predict(clas3,Grid)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10))
show(regions)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'x', values = twoClassColor)
show(regions)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10))
show(regions)
clas3 = naiveBayes(x=find2[-1], y = as.factor(find2$x))
fits = mutate(find2, prev3 = predict(clas3, newdata = find2[-1]) )
nbp <- 250;
PredA <- seq(min(find2$oil), max(find2$oil), length = nbp)
PredB <- seq(min(find2$pca), max(find2$pca), length = nbp)
Grid <- expand.grid(oil = PredA, pca = PredB)
a = predict(clas3,Grid)
library(ggplot2)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'x', values = twoClassColor)
show(regions)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10))
show(regions)
regions
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'x', values = twoClassColor)
show(regions)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10)) +
scale_colour_manual(values = twoClassColor)
show(regions)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'x', values = twoClassColor)
show(regions)
names(twoClassColor) <- c('Class1','Class2')
twoClassColor <- brewer.pal(3,'Set1')[1:2]
names(twoClassColor) <- c('Class1','Class2')
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name = 'x', values = twoClassColor)
show(regions)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name ='x', values =twoClassColor)
show(regions)
regions = ggplot(data = fits, aes(x=oil, y=pca, color =x)) +
geom_tile(data = cbind(Grid, x = a), aes(fill = x)) +
#scale_fill_manual(name = 'x', values = twoClassColor) +
ggtitle("Decision region") +
theme(legend.text = element_text(size = 10)) +
scale_colour_manual(name ='x', values =twoClassColor)
show(regions)
