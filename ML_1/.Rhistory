# Defining my work diretory
library(tinytex)
setwd("D:/Git projects/college_works/ML_1")
find = readRDS('findata.rds')
keep2 = c('x', 'gold', 'vix')
find3 = find[,keep2]
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/Git projects/college_works/ML_1")
tr2 = find3[1:231, ]
tst2 = find3[232:241, ]
cl4 = naivef('x',tr2, cd=0)
naive_marcos = function(k, df){
a = prop.table(table(df[ ,k]))
ta = length(a)
nm = rownames(a)
print(strrep('=-', 27))
print('Marcos Naive Bayes Classifier for Discrete Predictors')
print(strrep('=-', 27))
cat('A-priori probabilities:\n')
print(a)
# simple trick to get names of variables without class variable
df2 = df[ , k]
df[ , k] = NULL
col_n = colnames(df)
df$k = df2
# defining lengths
t_b1 =length( prop.table(table(df[ ,col_n[1]])))
t_c1 =length( prop.table(table(df[ ,col_n[2]])))
# probabilities array
M1 = array(0, dim=c(t_b1, t_c1, ta) )
for (k in 1:ta) {
f1 = df['k'] == nm[k]
b1 = prop.table(table(df[f1,col_n[1]]))
c1 = prop.table(table(df[f1,col_n[2]]))
for(j in 1:length(c1)){
for ( i in 1:length(b1) ) {
M1[i, j, k] = a[k]*b1[i]*c1[j]
}
}
}
dimnames(M1) = list(rownames(prop.table(table(df[ ,col_n[1]]))),rownames( prop.table(table(df[ ,col_n[2]]))), nm )
cat('Conditional Probabilities: \n')
return(M1)
}
cl = naive_marcos('risco', df)
cl
#-------- Classifying new data
pred_marcos = function(k, df, df_n, cl, cclas=0){
# k -> class
# df -> data to training algorithm
# df_n -> new data vectors
# cclas -> to get classification (1) or probabilities (0)
# cl -> classifier
a = prop.table(table(df[,k]))
ta = length(a)
nm = rownames(a)
tvv = length(df_n[,1])
cnewd = c()
pmax = c()
v = matrix(0, tvv, ta)
for(i in 1:tvv){
v[i, ] =  cl[df_n[i, 1], df_n[i, 2],  ]
v[i, ] = v[i, ]/sum(v[i, ])
pmax[i] = which.max(v[i, ])
cnewd[i] = nm[pmax[i]]
}
colnames(v) = nm
if(cclas==0){
return(v)
}else{
return(cnewd)
}
}
naive_marcos2 = function(k, df){
df = as.data.frame(df)
namedf = colnames(df)        #reorder columns
n1= which(namedf!= k)[1]
n2 = which(namedf!= k)[2]
n3 = which(namedf== k)
df = df[ ,c(n1, n2, n3)]
a = prop.table(table(df[ ,k]))
ta = length(a)
nm = rownames(a)
print(strrep('=-', 27))
print('Marcos Naive Bayes Classifier for Discrete Predictors')
print(strrep('=-', 27))
cat('A-priori probabilities:\n')
print(a)
M = array(0, dim = c(2,2, ta))
m = matrix(0, 2, 2)
for(g in 1:ta){
m1 = as.matrix(tapply(df[,1], df[,k], mean)[g])
v1 = as.matrix(tapply(df[,1], df[,k], sd)[g])
m2 = tapply(df[,2], df[,k], mean)[g]
v2 = tapply(df[,2], df[,k], sd)[g]
m = matrix(c(m1, m2, v1, v2)  )
M[, ,g] = m
#cat(nm[g], '\n')
}
dimnames(M) = list(c(), c('mean', 'variance'), nm)
return(M)
}
p = function(k, df, cl, b, c, cclas=0){
t = prop.table(table(df[,k]))
ta = length(t)
nm = rownames(t)
P = array(0, dim = c(2, 1, ta))
pm = matrix(0, nrow = ta, ncol = 1)
for(i in 1:ta){
a =dnorm(b, mean=cl[1, 1 ,i] , sd=cl[1, 2 ,i])
d = dnorm(c, mean=cl[2, 1 ,i] , sd=cl[2, 2 ,i])
m = matrix(c(a,d))
P[, ,i] = m
pm[i] = t[i]*P[1,1,i]*P[2,1,i]
}
pm = pm/sum(pm)
pm = t(pm)
colnames(pm) = nm
paa = which.max(pm)
cnewd = colnames(pm)[paa]
if(cclas==0){
return(pm)
}else{
return(cnewd)
}
}
pred_marcos2 = function(k, df, df_n, cl, cclas=1){
t = prop.table(table(df[,k]))
ta = length(t)
nm = rownames(t)
if(cclas==1){
p_new = matrix(0, nrow = length(df_n[,1]))
for(i in 1:length(df_n[,1])){
p_new[i] = p(k, df, cl, df_n[i, 1], df_n[i, 2], cclas=1)
}
}else if(cclas==0){
p_new = matrix(0, nrow = length(df_n[ , 1]), ncol=2)
for(i in 1:length(df_n[,1])){
p_new[i, ] = p(k, df, cl, df_n[i, 1], df_n[i, 2], cclas=0)
}
colnames(p_new) = nm
}
return(p_new)
}
naivef = function(k, df, cd=1){
if(cd == 1){
naive_marcos(k, df)
}else if (cd == 0){
naive_marcos2(k, df)
}else{
cat('Type cd = 1 for categorical dependent variables, \n and cd = 0 for non-categorical dependent variables.')
}
}
predf = function(k, df, df_n, cl, cclas=0, cd=1){
if(cd == 1){
pred_marcos(k, df, df_n, cl, cclas)
}else if (cd == 0){
pred_marcos2(k, df, df_n, cl, cclas)
}else{
cat('Type cd = 1 for categorical dependent variables, \n and cd = 0 for non-categorical dependent variables.')
}
}
tr2 = find3[1:231, ]
tst2 = find3[232:241, ]
cl4 = naivef('x',tr2, cd=0)
predf('x', tr2, tst2, cl4, cclas=0, cd=0)
predf('x', tr2, tst2, cl4, cclas=0, cd=1)
predf('x', tr2, tst2, cl4, cclas=1, cd=0)
View(find3)
View(find3)
predf('x', tr2, tst2, cl4, cclas=0, cd=0)
predf('x', tr2, tst2, cl4, cclas=1, cd=0)
predf('x', tr2, tst2, cl4, cclas=0, cd=1)
predf('x', tr2, tst2, cl4, cclas=1, cd=0)
predf('x', tr2, tst2, cl4, cclas=0, cd=0)
library(fGarch)
basicStats(find3)
cl4
scale(find3)
scale(find3[,2:3])
predf('x', tr2, tst2, cl4, cclas=0, cd=0)
cl3 = naivef('x', find2[1:231, ], cd=0)
teste <- read.csv("teste.csv")
teste$foot = NULL
df2 = teste[,'sex']
teste[,'sex']=NULL
teste$sex = df2
teste = data.frame(teste)
teste <- read.csv("teste.csv")
teste$foot = NULL
df2 = teste[,'sex']
teste[,'sex']=NULL
teste$sex = df2
teste = data.frame(teste)
cc = naive_marcos2('sex', teste)
o = p('sex', teste, cc, 5, 188, cclas = 0)
o
height = c(5.4, 5.8, 6, 5)
weight = c(170, 183, 188, 188)
dfn = data.frame(height, weight)
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 0)
oo
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 1)
oo
cl4 = naivef('x',tr2, cd=0)
predf('x', tr2, tst2, cl4, cclas=0, cd=0)
basicStats(tst2)
predf('x', tr2, tst2, cl4, cclas=0, cd=0)
dnorm(tst2[1,2])
dnorm(tst2[2,2])
dnorm(tst2[3,2])
dnorm(tst2[4,2])
dnorm(tst2[5,2])
head(find3)
tail(find3)
find3[,2] = diff(log(find3[,2]))
keep2 = c('x', 'oil', 'vix')
find3 = find[,keep2]
tr2 = find3[1:231, ]
tst2 = find3[232:241, ]
cl4 = naivef('x',tr2, cd=0)
predf('x', tr2, tst2, cl4, cclas=0, cd=0)
View(find)
keep2 = c('x', 'cdi', 'vix')
find3 = find[,keep2]
tr2 = find3[1:231, ]
tst2 = find3[232:241, ]
cl4 = naivef('x',tr2, cd=0)
predf('x', tr2, tst2, cl4, cclas=0, cd=0)
keep2 = c('x', 'cb', 'vix')
find3 = find[,keep2]
library(ggplot2)
ggplot(data=find3, aes(x=cb, y=vix, colour=as.factor(x))) + geom_point(size=4)+
geom_vline(xintercept = 110)
library(ggplot2)
ggplot(data=find3, aes(x=cb, y=vix, colour=as.factor(x))) + geom_point(size=4)+
geom_vline(xintercept = 105)
library(ggplot2)
ggplot(data=find3, aes(x=cb, y=vix, colour=as.factor(x))) + geom_point(size=4)+
geom_vline(xintercept = 104) + geom_hline(yintercept = 35)
library(ggplot2)
ggplot(data=find3, aes(x=cb, y=vix, colour=as.factor(x))) + geom_point(size=4)+
geom_vline(xintercept = 104) + geom_hline(yintercept = 37)
library(ggplot2)
ggplot(data=find3, aes(x=cb, y=vix, colour=as.factor(x))) + geom_point(size=4)+
geom_vline(xintercept = 104) + geom_hline(yintercept = 36)
