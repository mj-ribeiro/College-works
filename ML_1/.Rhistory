install.packages("readxl")
# Defining my work diretory
setwd("C:/Users/user/Downloads/ML_work/Algorithm")
library(readxl)
teste <- read_excel("teste.xlsx")
teste$foot = NULL
df2 = teste[,'sex']
teste[,'sex']=NULL
teste$sex = df2
teste = data.frame(teste)
#--- function
naive_marcos2 = function(k, df){
df = as.data.frame(df)
#fator =  factor(df[,k])
a = prop.table(table(df[ ,k]))
ta = length(a)
nm = rownames(a)
print('Marcos Naive Bayes Classifier for Discrete Predictors')
cat('A-priori probabilities:\n')
#df2 = df[ , k]
print(a)
#df[ ,k] = NULL
#col_n = colnames(df)
#df[,k] = df2
M = array(0, dim = c(2,2, ta))
m = matrix(0, 2, 2)
for(g in 1:ta){
m1 = as.matrix(tapply(df[,1], df[,k], mean)[g])
v1 = as.matrix(tapply(df[,1], df[,k], sd)[g])
m2 = tapply(df[,2], df[,k], mean)[g]
v2 = tapply(df[,2], df[,k], sd)[g]
m = matrix(c(m1, m2, v1, v2)  )
M[, ,g] = m
cat(nm[g], '\n')
print(M[, ,g])
}
return(M)
}
cc = naive_marcos2('sex', teste)
library(readxl)
teste <- read_excel("teste.xlsx")
setwd("C:/Users/user/Downloads/ML_work/Algorithm")
getwd()
naive_marcos = function(k, df){
a = prop.table(table(df[ ,k]))
ta = length(a)
nm = rownames(a)
print(strrep('=-', 27))
print('Marcos Naive Bayes Classifier for Discrete Predictors')
print(strrep('=-', 27))
cat('A-priori probabilities:\n')
print(a)
# simple trick to get names of variables without class variable
df2 = df[ , k]
df[ , k] = NULL
col_n = colnames(df)
df$k = df2
# defining lengths
t_b1 =length( prop.table(table(df[ ,col_n[1]])))
t_c1 =length( prop.table(table(df[ ,col_n[2]])))
# probabilities array
M1 = array(0, dim=c(t_b1, t_c1, ta) )
for (k in 1:ta) {
f1 = df['k'] == nm[k]
b1 = prop.table(table(df[f1,col_n[1]]))
c1 = prop.table(table(df[f1,col_n[2]]))
for(j in 1:length(c1)){
for ( i in 1:length(b1) ) {
M1[i, j, k] = a[k]*b1[i]*c1[j]
}
}
}
dimnames(M1) = list(rownames(prop.table(table(df[ ,col_n[1]]))),rownames( prop.table(table(df[ ,col_n[2]]))), nm )
cat('Conditional Probabilities: \n')
return(M1)
}
pred_marcos = function(k, df, df_n, cl, cclas=0){
# k -> class
# df -> data to training algorithm
# df_n -> new data vectors
# cclas -> to get classification (1) or probabilities (0)
# cl -> classifier
a = prop.table(table(df[,k]))
ta = length(a)
nm = rownames(a)
tvv = length(df_n[,1])
cnewd = c()
pmax = c()
v = matrix(0, tvv, ta)
for(i in 1:tvv){
v[i, ] =  cl[df_n[i, 1], df_n[i, 2],  ]
v[i, ] = v[i, ]/sum(v[i, ])
pmax[i] = which.max(v[i, ])
cnewd[i] = nm[pmax[i]]
}
colnames(v) = nm
if(cclas==0){
return(v)
}else{
return(cnewd)
}
}
naive_marcos2 = function(k, df){
df = as.data.frame(df)
#fator =  factor(df[,k])
a = prop.table(table(df[ ,k]))
ta = length(a)
nm = rownames(a)
print(strrep('=-', 27))
print('Marcos Naive Bayes Classifier for Discrete Predictors')
print(strrep('=-', 27))
cat('A-priori probabilities:\n')
print(a)
M = array(0, dim = c(2,2, ta))
m = matrix(0, 2, 2)
for(g in 1:ta){
m1 = as.matrix(tapply(df[,1], df[,k], mean)[g])
v1 = as.matrix(tapply(df[,1], df[,k], sd)[g])
m2 = tapply(df[,2], df[,k], mean)[g]
v2 = tapply(df[,2], df[,k], sd)[g]
m = matrix(c(m1, m2, v1, v2)  )
M[, ,g] = m
#cat(nm[g], '\n')
}
dimnames(M) = list(c(), c('mean', 'variance'), nm)
return(M)
}
p = function(k, df, cl, b, c, cclas=0){
t = prop.table(table(df[,k]))
ta = length(t)
nm = rownames(t)
P = array(0, dim = c(2, 1, ta))
pm = matrix(0, nrow = ta, ncol = 1)
for(i in 1:ta){
a =dnorm(b, mean=cl[1, 1 ,i] , sd=cl[1, 2 ,i])
d = dnorm(c, mean=cl[2, 1 ,i] , sd=cl[2, 2 ,i])
m = matrix(c(a,d))
P[, ,i] = m
pm[i] = t[i]*P[1,1,i]*P[2,1,i]
}
pm = pm/sum(pm)
pm = t(pm)
colnames(pm) = nm
paa = which.max(pm)
cnewd = colnames(pm)[paa]
if(cclas==0){
return(pm)
}else{
return(cnewd)
}
}
pred_marcos2 = function(k, df, df_n, cl, cclas=1){
t = prop.table(table(df[,k]))
ta = length(t)
nm = rownames(t)
if(cclas==1){
p_new = matrix(0, nrow = length(df_n[,1]))
for(i in 1:length(df_n[,1])){
p_new[i] = p(k, df, cl, df_n[i, 1], df_n[i, 2], cclas=1)
}
}else if(cclas==0){
p_new = matrix(0, nrow = length(df_n[ , 1]), ncol=2)
for(i in 1:length(df_n[,1])){
p_new[i, ] = p(k, df, cl, df_n[i, 1], df_n[i, 2], cclas=0)
}
colnames(p_new) = nm
}
return(p_new)
}
naivef = function(k, df, cd=1){
if(cd == 1){
naive_marcos(k, df)
}else if (cd == 0){
naive_marcos2(k, df)
}else{
cat('Type cd = 1 for categorical dependent variables, \n and cd = 0 for non-categorical dependent variables.')
}
}
predf = function(k, df, df_n, cl, cclas=0, cd=1){
if(cd == 1){
pred_marcos(k, df, df_n, cl, cclas)
}else if (cd == 0){
pred_marcos2(k, df, df_n, cl, cclas)
}else{
cat('Type cd = 1 for categorical dependent variables, \n and cd = 0 for non-categorical dependent variables.')
}
}
readRDS(df.rds)
readRDS('df.rds')
setwd("D:/Git projects/college_works/ML_1")
readRDS('df.rds')
find = readRDS('df.rds')
View(find)
pca = readRDS('pca.rds')
View(find)
View(pca)
View(pca)
View(pca)
pca = as.data.frame(pca)
install.packages("ROSE")
setwd("D:/Git projects/Finance/Finance_R")
library(caret)
library(ROSE)
# see: http://topepo.github.io/caret/train-models-by-tag.html#neural-network
# see: https://www.analyticsvidhya.com/blog/2016/03/practical-guide-deal-imbalanced-classification-problems/
# CV in TS https://rpubs.com/crossxwill/time-series-cv
#--- load variables
pca = readRDS('pca.rds')
df = readRDS('df.rds')
pca2 = pca
pca2 = pca2[-1]
pca2 =pca2[-242]
basicStats(pca2)
df2 = df
df2$pca = pca2
df2$x = ifelse(df2$x==2, 0, df2$x )
table(df2$x)
setwd("D:/Git projects/college_works/eco_fin")
pca = readRDS('pca.rds')
df = readRDS('df.rds')
pca2 = pca
pca2 = pca2[-1]
pca2 =pca2[-242]
df2 = df
df2$pca = pca2
df2$x = ifelse(df2$x==2, 0, df2$x )
View(df2)
saveRDS(df2, 'findata.rds')
find = readRDS('findata.rds')
View(pca)
View(find)
View(find)
keep = c('x', 'oil', 'pca')
find[,keep]
find = find[,keep]
naivef('x', find, cd=1)
naivef('x', find, cd=0)
library(fGarch)
basicStats(find$oil)
find[,(2,3,1)]
find[,c(2,3,1)]
find  = find[,c(2,3,1)]
naivef('x', find, cd=0)
which(df$ret)
grep('oil', colnames(df))
df[ c(7)]
find[ c(,,7)]
namedf = colnames(df)
namedf = colnames(df)
namedf = colnames(df)
find[,c(2,3,1)]
namedf = colnames(df)
namedf
namedf = colnames(find)
namedf
which(namedf=='oil')
-which(namedf=='oil')
which(namedf=!'oil')
which(namedf!='oil')
which(namedf!='oil')[1]
which(namedf!='oil')[2]
naive_marcos2 = function(k, df){
df = as.data.frame(df)
namedf = colnames(df)        #reorder columns
n1= which(namedf!= k)[1]
n2 = which(namedf!= k)[2]
n3 = which(namedf== k)
df = df[ ,c(n1, n2, n3)]
a = prop.table(table(df[ ,k]))
ta = length(a)
nm = rownames(a)
print(strrep('=-', 27))
print('Marcos Naive Bayes Classifier for Discrete Predictors')
print(strrep('=-', 27))
cat('A-priori probabilities:\n')
print(a)
M = array(0, dim = c(2,2, ta))
m = matrix(0, 2, 2)
for(g in 1:ta){
m1 = as.matrix(tapply(df[,1], df[,k], mean)[g])
v1 = as.matrix(tapply(df[,1], df[,k], sd)[g])
m2 = tapply(df[,2], df[,k], mean)[g]
v2 = tapply(df[,2], df[,k], sd)[g]
m = matrix(c(m1, m2, v1, v2)  )
M[, ,g] = m
#cat(nm[g], '\n')
}
dimnames(M) = list(c(), c('mean', 'variance'), nm)
return(M)
}
find = readRDS('findata.rds')
keep = c('x', 'oil', 'pca')
find = find[,keep]
View(find)
naivef('x', find, cd=0)
View(find)
find = readRDS('findata.rds')
keep = c('x', 'oil', 'pca')
find2 = find[,keep]
naivef('x', find2, cd=0)
naivef('x', find2[1:231, ], cd=0)
cl3 = naivef('x', find2[1:231, ], cd=0)
predf('x',find2[1:231, ], find2[232:241, cl3, cclas=0, cd=1 ] )
predf('x',find2[1:231, ], find2[232:241, ], cl3, cclas=0, cd=1 )
predf('x', train, test, cl3, cclas=0, cd=1 )
predf('x', train, test, cl3, cclas=0, cd=0)
predf('x', train, test, cl3, cclas=1, cd=0)
predf('x', train, test, cl3, cclas=1, cd=0)
library(readxl)
teste <- read_excel("teste.xlsx")
teste$foot = NULL
df2 = teste[,'sex']
teste[,'sex']=NULL
teste$sex = df2
teste = data.frame(teste)
teste <- read.csv("teste.csv")
teste$foot = NULL
df2 = teste[,'sex']
teste[,'sex']=NULL
teste$sex = df2
teste = data.frame(teste)
setwd("D:/Git projects/college_works/ML_1")
teste <- read.csv("teste.csv")
teste$foot = NULL
df2 = teste[,'sex']
teste[,'sex']=NULL
teste$sex = df2
teste = data.frame(teste)
cc = naive_marcos2('sex', teste)
cc
o = p('sex', teste, cc, 5, 188, cclas = 0)
o
height = c(5.4, 5.8, 6, 5)
weight = c(170, 183, 188, 188)
dfn = data.frame(height, weight)
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 0)
oo
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 1)
oo
predf('x', train, test, cl3, cclas=1, cd=0)
train
tr = find2[1:231, ]
tst = find2[232:241, ]
predf('x', tr, tst, cl3, cclas=1, cd=0)
predf('x', tr, tst, cl3, cclas=1, cd=1)
predf('x', tr, tst, cl3, cclas=0, cd=0)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/Git projects/college_works/ML_1")
tr = find2[1:231, ]
tst = find2[232:241, ]
cl3 = naivef('x',tr, cd=0)
predf('x', tr, tst, cl3, cclas=0, cd=0)
predf('x', tr, tst, cl3, cclas=0, cd=0)
predf('x', tr, tst, cl3, cclas=1, cd=0)
prev = predf('x', tr, tst, cl3, cclas=1, cd=0)
prev == tst
prev == tst[,1]
sum((prev == tst[,1])*1)
sum((prev == tst[,1])*1)/length(tst[,1])
(sum((prev == tst[,1])*1)/length(tst[,1]) )*100
accuracy = (sum((prev == tst[,1])*1)/length(tst[,1]) )*100
View(find)
hist(find$ret)
hist(find$ret, color='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns' )
hist(find$ret, colour='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns' )
hist(find$ret, colour='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns' )
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns' )
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns', xlab = 'returns' )
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns' )
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns' )
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-04-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2000-03-01',
to = '2020-04-01',
periodicity = "monthly",
auto.assign = F)[,4]
plot(ibov)
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns' )
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2000-03-01',
to = '2020-04-01',
periodicity = "monthly",
auto.assign = F)[,4]
par(mfrow=c(1,2))
plot(ibov)
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns' )
quantile(find$ret, 0.05)
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns' )
vline(quantile(find$ret, 0.05))
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns' )
line(v =quantile(find$ret, 0.05))
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns' )
abline(v =quantile(find$ret, 0.05))
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2000-03-01',
to = '2020-04-01',
periodicity = "monthly",
auto.assign = F)[,4]
par(mfrow=c(1,2))
plot(ibov, main='Evolution of Ibovespa')
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns', breaks=35 )
abline(v =quantile(find$ret, 0.05))
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2000-03-01',
to = '2020-04-01',
periodicity = "monthly",
auto.assign = F)[,4]
par(mfrow=c(1,2))
plot(ibov, main='Evolution \n of Ibovespa')
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns', breaks=35 )
abline(v =quantile(find$ret, 0.05))
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2000-03-01',
to = '2020-04-01',
periodicity = "monthly",
auto.assign = F)[,4]
par(mfrow=c(1,2))
plot(ibov, main='Evolution \n of Ibovespa')
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns', breaks=35 )
abline(v =quantile(find$ret, 0.05))
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2000-03-01',
to = '2020-04-01',
periodicity = "monthly",
auto.assign = F)[,4]
par(mfrow=c(1,2))
plot(as.vector(ibov), main='Evolution \n of Ibovespa')
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns', breaks=35 )
abline(v =quantile(find$ret, 0.05))
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2000-03-01',
to = '2020-04-01',
periodicity = "monthly",
auto.assign = F)[,4]
par(mfrow=c(1,2))
plot(as.vector(ibov), main='Evolution \n of Ibovespa', type='l')
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns', breaks=35 )
abline(v =quantile(find$ret, 0.05))
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2000-03-01',
to = '2020-04-01',
periodicity = "monthly",
auto.assign = F)[,4]
par(mfrow=c(1,2))
plot(as.vector(ibov), main='Evolution \n of Ibovespa', type='l', ylab='Ibov', ylab='Time')
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2000-03-01',
to = '2020-04-01',
periodicity = "monthly",
auto.assign = F)[,4]
par(mfrow=c(1,2))
plot(as.vector(ibov), index(ibov), main='Evolution \n of Ibovespa', type='l', ylab='Ibov', xlab='Time')
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns', breaks=35 )
abline(v =quantile(find$ret, 0.05))
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2000-03-01',
to = '2020-04-01',
periodicity = "monthly",
auto.assign = F)[,4]
par(mfrow=c(1,2))
plot(index(ibov), as.vector(ibov) , main='Evolution \n of Ibovespa', type='l', ylab='Ibov', xlab='Time')
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa returns',
xlab = 'returns', breaks=35 )
abline(v =quantile(find$ret, 0.05))
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '2000-03-01',
to = '2020-04-01',
periodicity = "monthly",
auto.assign = F)[,4]
par(mfrow=c(1,2))
plot(index(ibov), as.vector(ibov) , main='Evolution\n of Ibovespa \n(a)', type='l', ylab='Ibov', xlab='Time')
hist(find$ret, col='lightgreen', probability = T, main = 'Histogram of Ibovespa\n returns \n(b)',
xlab = 'returns', breaks=35 )
abline(v =quantile(find$ret, 0.05))
library(ggplot2)
ggplot(data=find2, aes(x=oil, y=pca, colour=x)) + geom_point(size=5)
library(ggplot2)
ggplot(data=find2, aes(x=oil, y=pca, colour=as.factor(x))) + geom_point(size=5)
library(ggplot2)
ggplot(data=find2, aes(x=oil, y=pca, colour=as.factor(x))) + geom_point(size=5)
