P = array(0, dim = c(2, 1, ta))
#print('Conditional Probabilities')
pm = matrix(0, nrow = ta, ncol = 1)
rownames(pm) = nm
for(i in 1:ta){
a =dnorm(b, mean=cl[1, 1 ,i] , sd=cl[1, 2 ,i])
d = dnorm(c, mean=cl[2, 1 ,i] , sd=cl[2, 2 ,i])
m = matrix(c(a,d))
P[, ,i] = m
pm[i] = t[i]*P[1,1,i]*P[2,1,i]
}
pm = pm/sum(pm)
pm = t(pm)
paa = which.max(pm)
cnewd = colnames(pm)[paa]
if(cclas==0){
return(pm)
}else{
return(cnewd)
}
}
o = p('sex', teste, cc, 5, 188, cclas = 0)
o
o = p('sex', teste, cc, 5, 188, cclas = 1)
o
pred_marcos2 = function(k, df, df_n, cl, cclas=1){
print(length(df_n[,1]))
if(cclas==1){
p_new = matrix(0, nrow = length(df_n[,1]))
for(i in 1:length(df_n[,1])){
p_new[i] = p(k, df, cl, df_n[i, 1], df_n[i, 2], cclas=1)
}
}else if(cclas==0){
p_new = matrix(0, nrow = length(df_n[ , 1]), ncol=2)
for(i in 1:length(df_n[,1])){
p_new[i, ] = p(k, df, cl, df_n[i, 1], df_n[i, 2], cclas=0)
}
}
return(p_new)
}
o = p('sex', teste, cc, 5, 188, cclas = 1)
o
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 1)
oo
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 0)
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 0)
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 0)
oo
p = function(k, df, cl, b, c, cclas=0){
t = prop.table(table(df[,k]))
ta = length(t)
nm = rownames(t)
P = array(0, dim = c(2, 1, ta))
#print('Conditional Probabilities')
pm = matrix(0, nrow = ta, ncol = 1)
for(i in 1:ta){
a =dnorm(b, mean=cl[1, 1 ,i] , sd=cl[1, 2 ,i])
d = dnorm(c, mean=cl[2, 1 ,i] , sd=cl[2, 2 ,i])
m = matrix(c(a,d))
P[, ,i] = m
pm[i] = t[i]*P[1,1,i]*P[2,1,i]
}
pm = pm/sum(pm)
pm = t(pm)
colnames(pm) = nm
paa = which.max(pm)
cnewd = colnames(pm)[paa]
if(cclas==0){
return(pm)
}else{
return(cnewd)
}
}
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 0)
oo
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 0)
oo
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 0)
oo
p = function(k, df, cl, b, c, cclas=0){
t = prop.table(table(df[,k]))
ta = length(t)
nm = rownames(t)
P = array(0, dim = c(2, 1, ta))
#print('Conditional Probabilities')
pm = matrix(0, nrow = ta, ncol = 1)
for(i in 1:ta){
a =dnorm(b, mean=cl[1, 1 ,i] , sd=cl[1, 2 ,i])
d = dnorm(c, mean=cl[2, 1 ,i] , sd=cl[2, 2 ,i])
m = matrix(c(a,d))
P[, ,i] = m
pm[i] = t[i]*P[1,1,i]*P[2,1,i]
}
pm = pm/sum(pm)
pm = t(pm)
colnames(pm) = nm
paa = which.max(pm)
cnewd = colnames(pm)[paa]
if(cclas==0){
return(pm)
}else{
return(cnewd)
}
}
o = p('sex', teste, cc, 5, 188, cclas = 1)
o
# --- prev
pred_marcos2 = function(k, df, df_n, cl, cclas=1){
if(cclas==1){
p_new = matrix(0, nrow = length(df_n[,1]))
for(i in 1:length(df_n[,1])){
p_new[i] = p(k, df, cl, df_n[i, 1], df_n[i, 2], cclas=1)
}
}else if(cclas==0){
p_new = matrix(0, nrow = length(df_n[ , 1]), ncol=2)
for(i in 1:length(df_n[,1])){
p_new[i, ] = p(k, df, cl, df_n[i, 1], df_n[i, 2], cclas=0)
}
}
return(p_new)
}
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 0)
oo
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 0)
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 1)
oo
p = function(k, df, cl, b, c, cclas=0){
t = prop.table(table(df[,k]))
ta = length(t)
nm = rownames(t)
print(nm)
P = array(0, dim = c(2, 1, ta))
#print('Conditional Probabilities')
pm = matrix(0, nrow = ta, ncol = 1)
for(i in 1:ta){
a =dnorm(b, mean=cl[1, 1 ,i] , sd=cl[1, 2 ,i])
d = dnorm(c, mean=cl[2, 1 ,i] , sd=cl[2, 2 ,i])
m = matrix(c(a,d))
P[, ,i] = m
pm[i] = t[i]*P[1,1,i]*P[2,1,i]
}
pm = pm/sum(pm)
pm = t(pm)
colnames(pm) = nm
paa = which.max(pm)
cnewd = colnames(pm)[paa]
if(cclas==0){
return(pm)
}else{
return(cnewd)
}
}
o = p('sex', teste, cc, 5, 188, cclas = 1)
p = function(k, df, cl, b, c, cclas=0){
t = prop.table(table(df[,k]))
ta = length(t)
nm = rownames(t)
print(nm)
P = array(0, dim = c(2, 1, ta))
#print('Conditional Probabilities')
pm = matrix(0, nrow = ta, ncol = 1)
for(i in 1:ta){
a =dnorm(b, mean=cl[1, 1 ,i] , sd=cl[1, 2 ,i])
d = dnorm(c, mean=cl[2, 1 ,i] , sd=cl[2, 2 ,i])
m = matrix(c(a,d))
P[, ,i] = m
pm[i] = t[i]*P[1,1,i]*P[2,1,i]
}
pm = pm/sum(pm)
pm = t(pm)
colnames(pm) = t(nm)
paa = which.max(pm)
cnewd = colnames(pm)[paa]
if(cclas==0){
return(pm)
}else{
return(cnewd)
}
}
o = p('sex', teste, cc, 5, 188, cclas = 1)
o
o = p('sex', teste, cc, 5, 188, cclas = 0)
o
p = function(k, df, cl, b, c, cclas=0){
t = prop.table(table(df[,k]))
ta = length(t)
nm = rownames(t)
P = array(0, dim = c(2, 1, ta))
#print('Conditional Probabilities')
pm = matrix(0, nrow = ta, ncol = 1)
for(i in 1:ta){
a =dnorm(b, mean=cl[1, 1 ,i] , sd=cl[1, 2 ,i])
d = dnorm(c, mean=cl[2, 1 ,i] , sd=cl[2, 2 ,i])
m = matrix(c(a,d))
P[, ,i] = m
pm[i] = t[i]*P[1,1,i]*P[2,1,i]
}
pm = pm/sum(pm)
pm = t(pm)
colnames(pm) = t(nm)
paa = which.max(pm)
cnewd = colnames(pm)[paa]
if(cclas==0){
return(pm)
}else{
return(cnewd)
}
}
o = p('sex', teste, cc, 5, 188, cclas = 0)
o
pred_marcos2 = function(k, df, df_n, cl, cclas=1){
if(cclas==1){
p_new = matrix(0, nrow = length(df_n[,1]))
for(i in 1:length(df_n[,1])){
p_new[i] = p(k, df, cl, df_n[i, 1], df_n[i, 2], cclas=1)
}
}else if(cclas==0){
p_new = matrix(0, nrow = length(df_n[ , 1]), ncol=2)
for(i in 1:length(df_n[,1])){
p_new[i, ] = p(k, df, cl, df_n[i, 1], df_n[i, 2], cclas=0)
}
}
return(p_new)
}
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 1)
oo
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 0)
oo
pred_marcos2 = function(k, df, df_n, cl, cclas=1){
t = prop.table(table(df[,k]))
ta = length(t)
nm = rownames(t)
if(cclas==1){
p_new = matrix(0, nrow = length(df_n[,1]))
for(i in 1:length(df_n[,1])){
p_new[i] = p(k, df, cl, df_n[i, 1], df_n[i, 2], cclas=1)
}
}else if(cclas==0){
p_new = matrix(0, nrow = length(df_n[ , 1]), ncol=2)
for(i in 1:length(df_n[,1])){
p_new[i, ] = p(k, df, cl, df_n[i, 1], df_n[i, 2], cclas=0)
}
colnames(p_new) = nm
}
return(p_new)
}
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 0)
oo
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 1)
oo
pred_marcos = function(k, df, df_c, cl, cclas=0){
# k -> class
# df -> data to training algorithm
# df_c -> new data vectors
# cclas -> to get classification (1) or probabilities (0)
# cl -> classifier
a = prop.table(table(df[,k]))
ta = length(a)
nm = rownames(a)
tvv = length(df_c[,1])
cnewd = c()
pmax = c()
v = matrix(0, tvv, ta)
for(i in 1:tvv){
v[i, ] =  cl[df_c[i, 1], df_c[i, 2],  ]
v[i, ] = v[i, ]/sum(v[i, ])
pmax[i] = which.max(v[i, ])
cnewd[i] = nm[pmax[i]]
}
colnames(v) = nm
if(cclas==0){
return(v)
}else{
return(cnewd)
}
}
d = pred_marcos('risco',  df, df_c, cclas = 0, cl)
d
d = pred_marcos('risco',  df, df_c, cl, cclas = 1)
d
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 1)
oo
pred_marcos = function(k, df, df_n, cl, cclas=0){
# k -> class
# df -> data to training algorithm
# df_c -> new data vectors
# cclas -> to get classification (1) or probabilities (0)
# cl -> classifier
a = prop.table(table(df[,k]))
ta = length(a)
nm = rownames(a)
tvv = length(df_n[,1])
cnewd = c()
pmax = c()
v = matrix(0, tvv, ta)
for(i in 1:tvv){
v[i, ] =  cl[df_c[i, 1], df_n[i, 2],  ]
v[i, ] = v[i, ]/sum(v[i, ])
pmax[i] = which.max(v[i, ])
cnewd[i] = nm[pmax[i]]
}
colnames(v) = nm
if(cclas==0){
return(v)
}else{
return(cnewd)
}
}
d = pred_marcos('risco',  df, df_n, cl, cclas = 1)
d = pred_marcos('risco',  df, df_c, cl, cclas = 1)
d
historia = c('boa',    'boa',  'ruim', 'ruim', 'desconhecida', 'desconhecida')
divida = c('baixa', 'alta', 'baixa', 'alta',    'baixa', 'alta')
df_teste = data.frame(historia, divida)
d = pred_marcos('risco',  df, df_teste, cl, cclas = 1)
d
predf = function(k, df, df_c, cl, cclas=0, cd=1){
if(cd == 1){
pred_marcos(k, df, df_n, cl, cclas=0)
}else if (cd == 0){
pred_marcos2(k, df, df_n, cl, cclas=1)
}else{
cat('Type cd = 1 for categorical dependent variables, \n and cd = 0 for non-categorical dependent variables.')
}
}
predf('sex', teste, dfn, cc, cclas = 1, cd=2)
predf('sex', teste, dfn, cc, cclas = 1, cd=1)
predf = function(k, df, df_n, cl, cclas=0, cd=1){
if(cd == 1){
pred_marcos(k, df, df_n, cl, cclas=0)
}else if (cd == 0){
pred_marcos2(k, df, df_n, cl, cclas=1)
}else{
cat('Type cd = 1 for categorical dependent variables, \n and cd = 0 for non-categorical dependent variables.')
}
}
predf('sex', teste, dfn, cc, cclas = 1, cd=1)
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 1)
oo
predf('sex', teste, dfn, cc, cclas = 1, cd=0)
predf('sex', teste, dfn, cc, cclas = 0, cd=0)
oo = pred_marcos2('sex', teste, dfn, cc, cclas = 0)
oo
predf('sex', teste, dfn, cc, cclas = 0, cd=0)
predf = function(k, df, df_n, cl, cclas=0, cd=1){
if(cd == 1){
pred_marcos(k, df, df_n, cl, cclas)
}else if (cd == 0){
pred_marcos2(k, df, df_n, cl, cclas)
}else{
cat('Type cd = 1 for categorical dependent variables, \n and cd = 0 for non-categorical dependent variables.')
}
}
predf('sex', teste, dfn, cc, cclas = 0, cd=0)
predf('sex', teste, dfn, cc, cclas = 1, cd=0)
predf('risco', teste, df_teste, cl, cclas = 1, cd=1)
predf('risco', df, df_teste, cl, cclas = 1, cd=1)
predf('risco', df, df_teste, cl, cclas = 0, cd=1)
naive_marcos2 = function(k, df){
df = as.data.frame(df)
#fator =  factor(df[,k])
a = prop.table(table(df[ ,k]))
ta = length(a)
nm = rownames(a)
print(strrep('=-', 30))
print('Marcos Naive Bayes Classifier for Discrete Predictors')
print(strrep('=-', 30))
cat('A-priori probabilities:\n')
print(a)
M = array(0, dim = c(2,2, ta))
m = matrix(0, 2, 2)
for(g in 1:ta){
m1 = as.matrix(tapply(df[,1], df[,k], mean)[g])
v1 = as.matrix(tapply(df[,1], df[,k], sd)[g])
m2 = tapply(df[,2], df[,k], mean)[g]
v2 = tapply(df[,2], df[,k], sd)[g]
m = matrix(c(m1, m2, v1, v2)  )
M[, ,g] = m
#cat(nm[g], '\n')
}
dimnames(M) = list(c(), c('mean', 'variance'), nm)
return(M)
}
predf('risco', df, df_teste, cl, cclas = 0, cd=1)
naivef('risco', df, cd=1)
naivef('risco', df, cd=1)
naivef('risco', df, cd=1)
knitr::opts_chunk$set(echo = FALSE)
naivef = function(k, df, cd=1){
if(cd == 1){
naive_marcos(k, df)
}else if (cd == 0){
naive_marcos2(k, df)
}else{
cat('Type cd = 1 for categorical dependent variables, \n
and cd = 0 for non-categorical dependent variables.')
}}
predf = function(k, df, df_n, cl, cclas=0, cd=1){
if(cd == 1){
pred_marcos(k, df, df_n, cl, cclas)
}else if (cd == 0){
pred_marcos2(k, df, df_n, cl, cclas)
}else{
cat('Type cd = 1 for categorical dependent variables,
\n and cd = 0 for non-categorical dependent variables.')
}}
df = read.csv('naive_base.csv')
df$garantias =NULL
df$renda =NULL
knitr::kable(head(df), caption = 'My dataset', label = 'Elaborate by author.')
knitr::opts_chunk$set(echo = FALSE)
naivef = function(k, df, cd=1){
if(cd == 1){
naive_marcos(k, df)
}else if (cd == 0){
naive_marcos2(k, df)
}else{
cat('Type cd = 1 for categorical dependent variables, \n
and cd = 0 for non-categorical dependent variables.')
}}
predf = function(k, df, df_n, cl, cclas=0, cd=1){
if(cd == 1){
pred_marcos(k, df, df_n, cl, cclas)
}else if (cd == 0){
pred_marcos2(k, df, df_n, cl, cclas)
}else{
cat('Type cd = 1 for categorical dependent variables,
\n and cd = 0 for non-categorical dependent variables.')
}}
df = read.csv('naive_base.csv')
df$garantias =NULL
df$renda =NULL
knitr::kable(head(df), caption = 'My dataset', label = 'Elaborate by author.')
naivef('risco', df, cd=1)
naive_marcos = function(k, df){
a = prop.table(table(df[ ,k]))
ta = length(a)
nm = rownames(a)
print(strrep('=-', 30))
print('Marcos Naive Bayes Classifier for Discrete Predictors')
print(strrep('=-', 30))
cat('A-priori probabilities:\n')
print(a)
# simple trick to get names of variables without class variable
df2 = df[ , k]
df[ , k] = NULL
col_n = colnames(df)
df$k = df2
# defining lengths
t_b1 =length( prop.table(table(df[ ,col_n[1]])))
t_c1 =length( prop.table(table(df[ ,col_n[2]])))
# probabilities array
M1 = array(0, dim=c(t_b1, t_c1, ta) )
for (k in 1:ta) {
f1 = df['k'] == nm[k]
b1 = prop.table(table(df[f1,col_n[1]]))
c1 = prop.table(table(df[f1,col_n[2]]))
for(j in 1:length(c1)){
for ( i in 1:length(b1) ) {
M1[i, j, k] = a[k]*b1[i]*c1[j]
}
}
}
dimnames(M1) = list(rownames(prop.table(table(df[ ,col_n[1]]))),rownames( prop.table(table(df[ ,col_n[2]]))), nm )
cat('Conditional Probabilities: \n')
return(M1)
}
pf = function(){
print('olá')
}
pf()
setwd("D:/Git projects/college_works/ML_1")
saveRDS(pf, 'fu')
readRDS(fu)
saveRDS(pf, 'fu.rds')
saveRDS(pf, 'fu.RDS')
readRDS(fu.RDS)
setwd("D:/Git projects/college_works/ML_1")
readRDS(fu.RDS)
fu <- readRDS("D:/Git projects/college_works/ML_1/fu.RDS")
fu()
readRDS(fu.RDS)
readRDS(fu)
readRDS(fu.rds)
knitr::opts_chunk$set(echo = TRUE)
#naive_marcos('risco', df)
cl = naivef('risco', df, cd=1)
head(cl)
head(cl[, ,1])
predf('risco', df, df_teste, cl, cclas = 0, cd=1)
source("D:\Git projects\college_works\ML_1\fu.RDS")
source("D:/Git projects/college_works/ML_1/fu.RDS")
fu <- readRDS("D:/Git projects/college_works/ML_1/fu.RDS")
fu()
source("D:/Git projects/college_works/ML_1/fu.RDS")
source(fu.rds, "D:/Git projects/college_works/ML_1/")
source(fu.rds)
if(!exists("foo", mode="function")) source("fu.rds")
if(!exists("foo", mode="function")) source("fu")
if(!exists("foo", mode="function")) source("fu.r")
if(!exists("foo", mode="function")) source("Nbayes2_work.R")
source("Nbayes2_work.R")
fx = source("Nbayes2_work.R")
library(fx)
setwd("D:/Git projects/college_works/ML_1")
df = read.csv('naive_base.csv')
df$garantias =NULL
df$renda =NULL
setwd("D:/Git projects/college_works/ML_1")
df = read.csv('naive_base.csv')
df$garantias =NULL
df$renda =NULL
