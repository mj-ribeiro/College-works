c = c + 1
}
for(i in ll){
print(metrics(i))
}
for(i in ll){
print(metrics(i))
}
metrics(i)
for(i in ll){
y=metrics(i)
}
cm_ml[["table"]]
cm_ml[["table"]][1,1]
metrics = function(cm){
acurácia = (cm[["table"]][1,1] + cm[["table"]][2,2])/sum(cm[["table"]])
sensibilidade = cm[["table"]][1,1] / ( cm[["table"]][1,1] + cm[["table"]][2,1] )
especificidade = cm[["table"]][2,2] /( cm[["table"]][2,2] + cm[["table"]][1,2] )
G = sqrt(sensibilidade*especificidade)
LP = sensibilidade/(1 - especificidade)
LR = (1 - sensibilidade)/(especificidade)
DP = sqrt(pi)/3 * ( log(sensibilidade/(1 - sensibilidade) ) + log( especificidade/(1 - especificidade) )  )
gamma = sensibilidade - (1 - especificidade)
BA = (1/2) * (sensibilidade + especificidade)
métricas = data.frame(acurácia, sensibilidade, especificidade, G, LP, LR, DP, gamma, BA)
#knitr::kable(métricas)
}
for(i in ll){
y=metrics(i)
}
metrics(cm_ml)
y=metrics(cm_ml)
y
for(i in ll){
print(i)
}
c = 1
for(i in ll){
métricas[c, ] = metrics(i)
c = c + 1
}
métricas
while(c < 4){
for(i in ll){
métricas[c, ] = metrics(i)
c = c + 1
}
}
c = 1
while(c < 4){
for(i in ll){
métricas[c, ] = metrics(i)
c = c + 1
}
}
ll
ll[1]
métricas[1, ] = metrics(ll[1])
métricas[2, ] = metrics(ll[2])
ll[2]
cm_ml[["table"]]
ll = c(cm_ml[["table"]], cm_NN[["table"]], cm_rf[["table"]], cm_xg[["table"]])
ll = array(ll, dim = c(2,2,4))
métricas[2, ] = metrics(ll[2])
métricas[1, ] = metrics(ll[1])
ll[,,1]
métricas[1, ] = metrics(ll[,,1])
metrics(ll[,,1])
métricas[1, ] = metrics(ll[, , 1])
metrics(cm_ml)
x=metrics(cm_ml)
x
len(x)
length(x)
length(métricas)
métricas[1, ] = metrics(cm_ml)
métricas[2, ] = metrics(cl_NN)
métricas[2, ] = metrics(cm_NN)
métricas[3, ] = metrics(cm_rf)
métricas[4, ] = metrics(cm_xg)
métricas
k = c(cm_ml, cm_NN, cm_rf, cm_xg)
c = 1
while(c < 4){
for(i in k){
métricas[c, ] = metrics(i)
}
}
for(i in k){
metrics(i)
}
k[1]
k[2]
k[3]
k[4]
k[5]
for(i in k){
i
}
for(i in k){
print(i)
}
d = 1
for(i in k){
print(i[(d)])
d = 4 + d
}
k[5]
k[9]
d = 1
for(i in k){
print(i[d])
d = 4 + d
}
k[9]
d = 1
for(i in k){
print(i)
d = 4 + d
}
d = 1
for(i in k){
print(i[d])
d = 4 + d
}
ll = c(cm_ml[["table"]], cm_NN[["table"]], cm_rf[["table"]], cm_xg[["table"]])
ll = array(ll, dim = c(2,2,4))
ll[,,1]
d = 1
for(i in k){
print(ll[,,d])
d = 1 + d
}
d = 1
while (d<4) {
for(i in k){
print(ll[,,d])
d = 1 + d
}
}
d = 1
while (d<5) {
for(i in k){
print(ll[,,d])
d = 1 + d
}
}
d = 1
while (d<5) {
for(i in k){
print(ll[,,d])
cat('d=', d)
d = 1 + d
}
}
ll[,,5]
ll[,,4]
d = 1
while (d<4) {
for(i in k){
print(ll[,,d])
cat('d=', d)
d = 1 + d
}
}
d =1
while (d<4) {
d = 1 + d
} print(d)
}
d =1
while (d<4) {
d = 1 + d
print(d)
}
d = 1
while (d<4) {
print(d)
d = 1 + d
}
d = 1
while (d<5) {
print(d)
d = 1 + d
}
d = 1
while (d<5) {
for(i in k){
print(ll[,,d])
cat('d=', d)
d = 1 + d
}
}
metrics(ll[,,2])
metrics(ll[,,1])
métricas = data.frame(matrix(, nrow=4, ncol=9))
row.names(métricas) = c('Multilogit', 'Redes neurais', 'Random Forests', 'XGboost')
colnames(métricas) = c("acurácia" , "sensibilidade", "especificidade", "G", "LP", "LR", "DP", "gamma", "BA")
métricas[1, ] = metrics(cm_ml)
métricas[2, ] = metrics(cm_NN)
métricas[3, ] = metrics(cm_rf)
métricas[4, ] = metrics(cm_xg)
métricas
round( métricas, 4 )
print(xtable(métricas, type = "latex"), file = "filename2.tex")
install.packages('xtable')
library('xtable')
print(xtable(métricas, type = "latex"), file = "filename2.tex")
2.15*6
2.15*6/9
métricas = round( métricas, 4)
t(métricas)
métricas
métricas = t(métricas)
print(xtable(métricas, type = "latex"), file = "filename2.tex")
métricas
print(xtable(métricas, type = "latex"), file = "filename2.tex")
print(xtable(métricas, type = "latex"), file = "filename2.tex")
métricas = round( métricas, 6)
métricas = t(métricas)
library('xtable')
print(xtable(métricas, type = "latex"), file = "filename2.tex")
(xtable(métricas)
xtable(métricas)
xtable(métricas)
xtable(métricas, 4)
xtable(métricas, 5)
xtable(métricas, digits=4)
print(xtable(métricas, type = "latex", digits=4), file = "filename2.tex")
métricas[1, ] = metrics(cm_ml)
métricas[2, ] = metrics(cm_NN)
métricas[3, ] = metrics(cm_rf)
métricas[4, ] = metrics(cm_xg)
métricas = round( métricas, 6)
métricas = t(métricas)
library('xtable')
print(xtable(métricas, type = "latex", digits=4), file = "filename2.tex")
métricas[1, ] = metrics(cm_ml)
métricas[2, ] = metrics(cm_NN)
métricas[3, ] = metrics(cm_rf)
métricas[4, ] = metrics(cm_xg)
métricas = data.frame(matrix(, nrow=4, ncol=9))
row.names(métricas) = c('Multilogit', 'Redes neurais', 'Random Forests', 'XGboost')
colnames(métricas) = c("acurácia" , "sensibilidade", "especificidade", "G", "LP", "LR", "DP", "gamma", "BA")
métricas[1, ] = metrics(cm_ml)
métricas[2, ] = metrics(cm_NN)
métricas[3, ] = metrics(cm_rf)
métricas[4, ] = metrics(cm_xg)
métricas = round( métricas, 4)
métricas = t(métricas)
métricas
print(xtable(métricas, type = "latex", digits=4), file = "filename2.tex")
model_i = train(as.factor(crise) ~ ret^2 + oil + cb + embi + cdi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~ ret^2 + oil + cb + embi + cdi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~ ret^2 + oil + rav + cb  + cdi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~ ret^2 + oil + rav + cb + embi , data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~ ret^2 + oil +  cb + embi + cdi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~ ret^2 + oil +  cb + embi + cdi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~ ret^2 + oil + rav +  cb + embi + cdi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~ ret^2 + oil + rav +  cb  + cdi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
control_train = trainControl(method = 'repeatedcv', number = 10, repeats = 10)    # ten fold
model_i = train(as.factor(crise) ~ ret^2 + oil + rav +  cb  + cdi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~ ret^2 + oil + rav  + cdi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  oil + rav  + cdi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  oil +  cdi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~    cdi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~    rav, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  embi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  oil, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  cb, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  rav, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + oil, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
control_train = trainControl(method = 'repeatedcv', number = 10, repeats = 1)    # ten fold
model_i = train(as.factor(crise) ~  gold + oil + rav, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + oil + rav, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + oil + rav, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + oil + rav + embi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + oil + rav + embi + oil, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + oil + rav + embi + oil, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + oil + rav + embi + oil + cb, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + oil + rav + embi + oil + cdi, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + oil  + embi + oil, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
model_i = train(as.factor(crise) ~  gold + oil  + embi + oil, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + oil   + oil, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + embi + oil, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + embi + oil + rav, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + embi + oil + cdi + rav, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + embi + oil + cdi , data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + embi + oil + cdi + rav, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + embi + oil + cdi + rav, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + embi + oil + cb + rav, data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + embi + oil + cb , data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + embi + oil + cb , data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + embi + oil + cb , data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
control_train = trainControl(method = 'repeatedcv', number = 10, repeats = 10)    # ten fold
model_i = train(as.factor(crise) ~  gold + embi + oil + cb , data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
model_i = train(as.factor(crise) ~  gold + embi + oil + cb + rav , data=df3,
method = "xgbTree",
trControl=control_train,
tuneGrid = tune_grid,
tuneLength = 10)
confusionMatrix(model_i)
