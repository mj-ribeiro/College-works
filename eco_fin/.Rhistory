#include <Rcpp.h>
using namespace Rcpp;
cppFunction(
int main(int argc, char** argv)
{	int f;
cout << "What number do you have factorial ?";
cin >> f;
int i, fat = 1;
cppFunction(
"int main(int argc, char** argv)
{	int f;
cout << "What number do you have factorial ?";
cin >> f;
int i, fat = 1;
y = function(l, k, alfa){
k^alfa*l^(1-alfa)
}
y(1, seq(1, 10, 1), 0.5)
curve(y(1, seq(1, 10, 1), 0.5))
y = function(l=1, x, alfa=0.5){
x^alfa*l^(1-alfa)
}
curve(y(x))
curve(y(x))
y = function(x){
l=1
alfa =0.5
x^alfa*l^(1-alfa)
}
curve(y(x))
curve(y(x), xlim=c(0, 1000))
curve(y(x), xlim=c(0, 1000000))
y = function(x){
l=1
alfa =0.8
x^alfa*l^(1-alfa)
}
curve(y(x), xlim=c(0, 1000000))
alfa =0.1
curve(y(x), xlim=c(0, 1000000))
y = function(x){
l=1
alfa =0.1
x^alfa*l^(1-alfa)
}
curve(y(x), xlim=c(0, 1000000))
252.42*3
26964*0.03
26964*0.025
eta =0.25
d = seq(-0.9, 0.9, 0.1)
(1 + d)^eta
kk  =1/ (1 + d)^eta
plot(kk)
plot(kk, type='l')
plot(kk, d, type='l')
plot(d, kk, type='l')
kk
zz =(1 + d)
plot(d, zz)
plot(d, zz, type = 'l')
zz =(1 - d)
plot(d, zz, type = 'l')
zz =(1 - d)êta
zz =(1 - d)^eta
plot(d, zz, type = 'l')
plot(d, kk, type='l')
install.packages(XML)
install.packages("textreadr")
library("textreadr")
read_html('http://www.econometrics.com/comdata/gujarati/data_3.2.shd')
data = aread_html('http://www.econometrics.com/comdata/gujarati/data_3.2.shd')
data = read_html('http://www.econometrics.com/comdata/gujarati/data_3.2.shd')
data
data = read_html('http://www.econometrics.com/comdata/gujarati/data_3.2.shd',
skip = 0, remove.empty = TRUE, trim = TRUE)
data
results <- data %>% html_nodes(".short-desc")
library(magrittr)
results <- data %>% html_nodes(".short-desc")
tab <- read.table("C:/Users/user/Desktop/aula/tab.txt", header=TRUE, row.names=1, quote="\"")
View(tab)
head(tab)
source('~/.active-rstudio-document', echo=TRUE)
summary(reg)
7.5*5.4*12
90*5.4
tecla
library(readxl)
library(readxl)
library(readxl)
library(readxl)
install.packages('readxl')
library(readxl)
tab = read_excel(file.choose())
head(tab)
tab = data.frame(tab)
head(tab)
library(readxl)
tab = read_excel(file.choose())
head(tab)
tab = data.frame(tab)
head(tab)
library(readxl)
tab = read_excel(file.choose())
head(tab)
tab = data.frame(tab)
head(tab)
reg = lm(tab$desp_ali ~ tab$desp_tot)
summary(reg)
plot(tab$desp_tot, tab$desp_ali, col='red')
plot(tab$desp_tot, tab$desp_ali, col='red', pch=19)
plot(tab$desp_tot, tab$desp_ali, col='red', pch=19, cex=2)
plot(tab$desp_tot, tab$desp_ali, col='red', pch=19, cex=2,
xlab = 'Despesa com alimentação',
ylab = 'Despesa total')
plot(tab$desp_tot, tab$desp_ali, col='red', pch=19, cex=2,
xlab = 'Despesa com alimentação',
ylab = 'Despesa total')
abline(reg)
#                                   Algorithms without rav
#***********************************************************************************************
setwd("D:/Git projects/college_works/eco_fin")
# functions
metrics = function(cm){
acurácia = (cm[["table"]][1,1] + cm[["table"]][2,2])/sum(cm[["table"]])
sensibilidade = cm[["table"]][1,1] / ( cm[["table"]][1,1] + cm[["table"]][2,1] )
especificidade = cm[["table"]][2,2] /( cm[["table"]][2,2] + cm[["table"]][1,2] )
G = sqrt(sensibilidade*especificidade)
LP = sensibilidade/(1 - especificidade)
LR = (1 - sensibilidade)/(especificidade)
DP = sqrt(pi)/3 * ( log(sensibilidade/(1 - sensibilidade) ) + log( especificidade/(1 - especificidade) )  )
gamma = sensibilidade - (1 - especificidade)
BA = (1/2) * (sensibilidade + especificidade)
métricas = data.frame(acur?cia, cpc, epc, sensibilidade, especificidade, G, LP, LR, DP, gamma, BA)
}
# libraries
library('xtable')
library(caret)
library(ROSE)
library('randomForest')
library(MLeval) # to get ROC curve
#--- load variables
df1 = readRDS('df.rds')
#df$rexc = as.numeric(df$rexc)
#df$embi = as.numeric(df$embi)
keep = c('crise', 'gold',  'embi',  'oil', 'cb', 'rexc',  'cdi')
df6 = df1[,keep]
library(xlsx)
write.xlsx(df6, 'data.xlsx')
### correlation
correl = round(cor(df6[,-c(1)]), 4 )
print(xtable(correl, type = "latex", digits=4), file = "correl.tex")
#--- Rose library
library(ROSE)
df3 = ovun.sample(as.factor(crise2)~., data=df6, method="both", p=0.50,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
df3 = data.frame(df3$data)
prop.table(table(df3$crise2))
df3$crise2 = ifelse(df3$crise2==1, 'yes', 'no')
#---- Control train
control_train = trainControl(method = 'repeatedcv',
number = 10,
repeats = 10,
savePredictions = TRUE,
classProbs = TRUE,
verboseIter = TRUE)    # ten fold
View(df1)
df1 = readRDS('df.rds')
keep = c('crise2', 'gold',  'embi',  'oil', 'cb', 'rexc',  'cdi')
df6 = df1[,keep]
library(xlsx)
library(ROSE)
View(df6)
df3 = ovun.sample(as.factor(crise2)~., data=df6, method="both", p=0.50,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
df3 = data.frame(df3$data)
prop.table(table(df3$crise2))
df3$crise2 = ifelse(df3$crise2==1, 'yes', 'no')
control_train = trainControl(method = 'repeatedcv',
number = 10,
repeats = 10,
savePredictions = TRUE,
classProbs = TRUE,
verboseIter = TRUE)    # ten fold
# LOGIT
model_d = train(as.factor(crise2) ~  gold + embi + oil + cb  + cdi, data=df3,
trControl = control_train,
method='multinom',
family='binomial',
maxit=200)
model_d
cm_lg1 = confusionMatrix(model_d)
confusionMatrix(model_d)
evalm(model_d)
x_d = evalm(model_d)
roc_lg1 = data.frame( x_d$roc$data[,c(2,1)] )
model_h =train(as.factor(crise2) ~  gold + embi + oil + cb + cdi, data=df3,
trControl = control_train, method='rf')
cm_rf1 = confusionMatrix(model_h)
####### ROC
x_h = evalm(model_h)
roc_rf1 = data.frame( x_h$roc$data[,c(2,1)] )
roc_lg1$feature="Logit"
roc_rf1$feature="FAs"
m_sav = rbind(roc_lg1, roc_rf1)
roc1 = ggplot(m_sav, aes(FPR, SENS, colour=feature)) +
geom_line(size=0.8) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=17),
axis.text.y = element_text(size=17),
axis.title.x = element_text(colour = 'black', size=17),
axis.title.y = element_text(colour = 'black', size=17),
legend.title=element_blank(),
legend.text = element_text(colour="black", size = 17),
plot.title = element_text(hjust = 0.5, size=19)) +
xlab('1 - Especificidade') +
ylab('Sensibilidade') +
ggtitle('Sem AV')
metricas = data.frame(matrix(, nrow=2, ncol=9))
row.names(metricas) = c('Logit',  'FA')
colnames(metricas) = c("Acurácia", "Sensibilidade", "Especificidade", "G", "LP", "LR", "DP", "gamma", "BA")
metricas[1, ] = metrics(cm_lg1)
metricas[2, ] = metrics(cm_rf1)
metrics = function(cm){
acurácia = (cm[["table"]][1,1] + cm[["table"]][2,2])/sum(cm[["table"]])
sensibilidade = cm[["table"]][1,1] / ( cm[["table"]][1,1] + cm[["table"]][2,1] )
especificidade = cm[["table"]][2,2] /( cm[["table"]][2,2] + cm[["table"]][1,2] )
G = sqrt(sensibilidade*especificidade)
LP = sensibilidade/(1 - especificidade)
LR = (1 - sensibilidade)/(especificidade)
DP = sqrt(pi)/3 * ( log(sensibilidade/(1 - sensibilidade) ) + log( especificidade/(1 - especificidade) )  )
gamma = sensibilidade - (1 - especificidade)
BA = (1/2) * (sensibilidade + especificidade)
métricas = data.frame(acurácia, cpc, epc, sensibilidade, especificidade, G, LP, LR, DP, gamma, BA)
}
metricas[1, ] = metrics(cm_lg1)
metricas[2, ] = metrics(cm_rf1)
metrics = function(cm){
acurácia = (cm[["table"]][1,1] + cm[["table"]][2,2])/sum(cm[["table"]])
sensibilidade = cm[["table"]][1,1] / ( cm[["table"]][1,1] + cm[["table"]][2,1] )
especificidade = cm[["table"]][2,2] /( cm[["table"]][2,2] + cm[["table"]][1,2] )
G = sqrt(sensibilidade*especificidade)
LP = sensibilidade/(1 - especificidade)
LR = (1 - sensibilidade)/(especificidade)
DP = sqrt(pi)/3 * ( log(sensibilidade/(1 - sensibilidade) ) + log( especificidade/(1 - especificidade) )  )
gamma = sensibilidade - (1 - especificidade)
BA = (1/2) * (sensibilidade + especificidade)
métricas = data.frame(acurácia, sensibilidade, especificidade, G, LP, LR, DP, gamma, BA)
}
metricas[1, ] = metrics(cm_lg1)
metricas[2, ] = metrics(cm_rf1)
metricas = round( metricas, 4)
semrav = t(metricas)
###############################################################################################
#                                     Com  RAV
###############################################################################################
#----- LOGIT
model_c = train(as.factor(crise2) ~  gold + embi + oil + cb + rexc + cdi, data=df3,
trControl = control_train,
method='multinom',
family='binomial',
maxit=200)
cm_lg2 = confusionMatrix(model_c)
x_c = evalm(model_c)
roc_lg2 = data.frame( x_c$roc$data[,c(2,1)] )
#------- RF
model_g = train(as.factor(crise2) ~  gold + embi + oil + cb + rexc + cdi, data=df3,
trControl = control_train, method='rf'
)
cm_rf2 = confusionMatrix(model_g)
################ ROC
x_g = evalm(model_g)
roc_rf2 = data.frame( x_g$roc$data[,c(2,1)] )
roc_lg2$feature="Logit"
roc_rf2$feature="FAs"
m_sav2 = rbind(roc_lg2, roc_rf2)
roc2 = ggplot(m_sav2, aes(FPR, SENS, colour=feature)) +
geom_line(size=0.8) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=17),
axis.text.y = element_text(size=17),
axis.title.x = element_text(colour = 'black', size=17),
axis.title.y = element_text(colour = 'black', size=17),
legend.title=element_blank(),
legend.text = element_text(colour="black", size = 17),
plot.title = element_text(hjust = 0.5, size=19) )  +
xlab('1 - Especificidade') +
ylab('Sensibilidade') +
ggtitle('Com AV')
############# create dataframe
metricas = data.frame(matrix(, nrow=2, ncol=9))
row.names(metricas) = c('Logit',  'FA')
colnames(metricas) = c("Acur?cia", "Sensibilidade", "Especificidade", "G", "LP", "LR", "DP", "gamma", "BA")
metricas[1, ] = metrics(cm_lg2)
metricas[2, ] = metrics(cm_rf2)
metricas = round( metricas, 4)
comrav = t(metricas)
model_m = train(as.factor(crise2) ~  rexc, data=df3,
trControl = control_train,
method='multinom',
family='binomial',
maxit=200)
cm_lg3 = confusionMatrix(model_m)
x_m = evalm(model_m)
roc_lg3 = data.frame( x_m$roc$data[,c(2,1)] )
#---------- RF
model_r = train(as.factor(crise2) ~ rexc, data=df3,
trControl = control_train,
method='rf')
cm_rf3 = confusionMatrix(model_r)
########### ROC
x_r = evalm(model_r)
roc_rf3 = data.frame( x_r$roc$data[,c(2,1)] )
roc_lg3$feature="Logit"
roc_rf3$feature="FAs"
m_sav3 = rbind(roc_lg3, roc_rf3)
roc3 = ggplot(m_sav3, aes(FPR, SENS, colour=feature)) +
geom_line(size=0.8) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=17),
axis.text.y = element_text(size=17),
axis.title.x = element_text(colour = 'black', size=17),
axis.title.y = element_text(colour = 'black', size=17),
legend.title=element_blank(),
legend.text = element_text(colour="black", size = 17),
plot.title = element_text(hjust = 0.5, size=19)) +
xlab('1 - Especificidade') +
ylab('Sensibilidade') +
ggtitle('Somente AV')
############ create dataframe
metricas = data.frame(matrix(, nrow=2, ncol=9))
row.names(metricas) = c('Logit',  'FA')
colnames(metricas) = c("Acur?cia", "Sensibilidade", "Especificidade", "G", "LP", "LR", "DP", "gamma", "BA")
metricas[1, ] = metrics(cm_lg3)
metricas[2, ] = metrics(cm_rf3)
metricas = round( metricas, 4)
sorav = t(metricas)
semrav
comrav
sorav
tt = merge.data.frame(semrav, comrav, by=0, all=T, sort = F)
rownames(tt) = tt$Row.names
tt = tt[,-1]
tab = merge.data.frame(tt, sorav, by=0, all=T, sort = F)
rownames(tab) = tab$Row.names
tab = tab[,-1]
tab
correl = round(cor(df6[,-c(1)]), 4 )
correl = round(cor(df6[,-1]), 4 )
cor(df6[,-1])
cor(df6)
str(df6)
#df$rexc = as.numeric(df$rexc)
df$embi = as.numeric(df$embi)
df1 = readRDS('df.rds')
#df$rexc = as.numeric(df$rexc)
df$embi = as.numeric(df$embi)
as.numeric(df$embi)
df$embi
#df$rexc = as.numeric(df$rexc)
df1$embi = as.numeric(df1$embi)
keep = c('crise2', 'gold',  'embi',  'oil', 'cb', 'rexc',  'cdi')
df6 = df1[,keep]
correl = round(cor(df6[,-1]), 4 )
correl
