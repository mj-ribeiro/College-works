saveRDS(df, 'df.rds')
setwd("D:/Git projects/college_works/eco_fin")
library(caret)
library(ROSE)
df3 = ovun.sample(as.factor(crise)~., data=df, method="both", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
df3 = data.frame(df3$data)
table(df3$x)
table(df3$crise)
control_train = trainControl(method = 'repeatedcv', number = 10, repeats = 2)    # ten fold
head(df3)
model4 = train(as.factor(crise) ~., data=df3[,-7], trControl = control_train,
method='nnet', threshold = 0.3)
model4
confusionMatrix(model4)
View(df)
model4 = train(as.factor(crise) ~., data=df3[,-c(1, 7, 10)], trControl = control_train,
method='nnet', threshold = 0.3)
df = data.frame(ret, vix, cb, crise, cdi, embi, crise2, oil, gold)
#pca = readRDS('pca.rds')
df = readRDS('df.rds')
df3 = ovun.sample(as.factor(crise)~., data=df, method="both", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
df3 = data.frame(df3$data)
control_train = trainControl(method = 'repeatedcv', number = 10, repeats = 2)    # ten fold
model4 = train(as.factor(crise) ~., data=df3[,-c(1, 7, 10)], trControl = control_train,
method='nnet', threshold = 0.3)
View(df)
View(df)
View(df)
df = data.frame(ret, vix, cb, crise, cdi, embi, crise2, oil, gold)
saveRDS(df, 'df.rds')
#pca = readRDS('pca.rds')
df = readRDS('df.rds')
df3 = ovun.sample(as.factor(crise)~., data=df, method="both", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
df3 = data.frame(df3$data)
table(df3$crise)
View(df)
model4 = train(as.factor(crise) ~., data=df3[,-c(1, 7, 10)], trControl = control_train,
method='nnet', threshold = 0.3)
confusionMatrix(model4)
summary(model4)
model4
confusionMatrix(model4)
model4 = train(as.factor(crise2) ~., data=df3[,-c(1, 4)], trControl = control_train,
method='nnet', threshold = 0.3)
confusionMatrix(model4)
model4 = train(as.factor(crise2) ~., data=df3[,-c(1, 4, 5)], trControl = control_train,
method='nnet', threshold = 0.3)
confusionMatrix(model4)
model4 = train(as.factor(crise2) ~., data=df3[,-c(4)], trControl = control_train,
method='nnet', threshold = 0.3)
model4
confusionMatrix(model4)
model4 = train(as.factor(crise2) ~., data=df3[,-c(1, 4)], trControl = control_train,
method='nnet', threshold = 0.6)
model4
confusionMatrix(model4)
model4 = train(as.factor(crise) ~ ret^2, vix + oil + cdi + embi, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
model4 = train(as.factor(crise) ~ ret^2 + vix + oil + cdi + embi, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model4)
model_b = train(as.factor(crise) ~ ret^2 + vix + oil + cdi + embi, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model_b)
model_b = train(as.factor(crise) ~ ret^2 + vix + oil + cb + embi, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
model_b
confusionMatrix(model_b)
model_b = train(as.factor(crise) ~ ret^2 + vix + oil + cb + embi + cdi, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
model_b
confusionMatrix(model_b)
model_b = train(as.factor(crise) ~ ret^2 + log(diff(vix)) + oil + cb + embi + cdi, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
model_b = train(as.factor(crise) ~ ret^2 + log(diff(vix)) + oil + cb + embi + cdi, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6, na.rm=T)
model_b = train(as.factor(crise) ~ ret^2 + log(diff(vix)) + oil + cb + embi + cdi, data=df3[-1,] , trControl = control_train,
method='nnet', threshold = 0.6)
model_b = train(as.factor(crise) ~ ret^2 + log(diff(vix)) + oil + cb + embi + cdi, data=df3[-1,] , trControl = control_train,
method='nnet', threshold = 0.6)
confusionMatrix(model_b)
model_b = train(as.factor(crise) ~ ret^2 + vix + oil + cb + embi + cdi, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
setwd("D:/Git projects/college_works/eco_fin")
read.csv('kalman.csv')
read.csv('kalman.csv')
read.csv('kalman.csv')[,1:2]
rav = read.csv('kalman.csv')[,1:2]
head(rav)
View(rav)
rav = read.csv('kalman.csv', header = T)[,1:2]
head(rav)
rav = read.csv('kalman.csv', header = T, sep = ',')[,1:2]
head(rav)
rav = read.csv('kalman.csv', header = T, sep = ',', )[,1:2]
head(rav)
as.Date( rav$data )
as.Date(rav$data, format = '%d-%m-%Y')
as.Date(rav$data, format = '%D-%M-%Y')
as.Date(rav$data, format = '%D-%M-%Y')
as.Date(rav$data, format = '%D-%m-%Y')
as.Date(rav$data, format = '%D-%m-%y')
as.Date(rav$data, format = '%d-%m-%y')
as.Date(rav$data, format = '%d/%m/%Y')
as.Date(rav$data, format = '%m/%d/%Y')
rav$data = as.Date(rav$data, format = '%m/%d/%Y')
s = k= firstDayMonth(rav$data)
View(s)
colnames(s) = 'date'
s = firstDayMonth(rav$data)
colnames(s) = 'date'
colnames(s) = c('date')
s = data.frame(s)
colnames(s) = c('date')
setDT(embi)
setDT(rav)
setDT(s)
colnames(rav) = c('date', 'rav')
rav[s, on = c('date')]
rav = read.csv('kalman.csv', header = T, sep = ',', )[,1:2]
rav$data = as.Date(rav$data, format = '%m/%d/%Y')
colnames(rav) = c('date', 'rav')
s = firstDayMonth(rav$data)
s = data.frame(s)
colnames(s) = c('date')
as.Date(s)
as.Date(s$date)
s$date
s = firstDayMonth(rav$date)
s = data.frame(s)
colnames(s) = c('date')
as.Date(s$date)
s = as.Date(s$date)
setDT(rav)
setDT(s)
setDT(rav)
setDT(s)
s = firstDayMonth(rav$date)
s = data.frame(s)
colnames(s) = c('date')
setDT(rav)
setDT(s)
embi = rav[s, on = c('date')]
rav[s, on = c('date')]
#### get first day
firstDayMonth=function(x)
{
x=as.Date(as.character(x))
day = format(x,format="%d")
monthYr = format(x,format="%Y-%m")
y = tapply(day,monthYr, min)
first=as.Date(paste(row.names(y),y,sep="-"))
#as.factor(first)
as.Date(first)
}
rav = read.csv('kalman.csv', header = T, sep = ',', )[,1:2]
rav$data = as.Date(rav$data, format = '%m/%d/%Y')
colnames(rav) = c('date', 'rav')
s = firstDayMonth(rav$date)
s = data.frame(s)
colnames(s) = c('date')
setDT(rav)
setDT(s)
rav[s, on = c('date')]
rav = rav[s, on = c('date')]
mday(rav$date)
mday(rav$date) = 1   # transformar os dias do vetor de datas k em 1 (lubridate)
rav[data]
rav = xts(rav, order.by = rav$date)
rav = rav[,-1]
plot(rav, type='l')
plot(rav)
plot(rav$rav)
plot.xts(rav)
rav = xts(rav, order.by = rav$date)
plot(rav)
plot(as.vector(rav))
plot(as.vector(rav), type='l')
rav[data]
rav[data]
rav = rav[data]
df = data.frame(ret, vix, cb, crise, cdi, embi, crise2, oil, gold, rav)
saveRDS(df, 'df.rds')
df = readRDS('df.rds')
df3 = ovun.sample(as.factor(crise)~., data=df, method="both", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
View(df)
dvix = log(diff(vix))
View(dvix)
dvix = diff(log(vix))
rvix = diff(log(vix))
rvix = rvix[data]
df = data.frame(ret, vix, cb, crise, cdi, embi, crise2, oil, gold, rav, rvix)
saveRDS(df, 'df.rds')
df = readRDS('df.rds')
df3 = ovun.sample(as.factor(crise)~., data=df, method="both", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
df3 = data.frame(df3$data)
table(df3$crise)
prop.table(table(df3$crise))
model4 = train(as.factor(crise) ~., data=df3[,-c(1, 7)], trControl = control_train,
method='nnet', threshold = 0.3)
vix = getSymbols('^VIX', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
to = '2020-05-01',
auto.assign = F)[,4]
colnames(vix) = 'vix'
rvix = diff(log(vix))
View(vix)
View(rvix)
head(data)
data = index(cmts)
data = data[-c(1, 2)]
crise = xts(crise[-c(1, 2)], order.by = data)
crise2 = xts(crise2[-c(1, 2)], order.by = data)
rvix = rvix[data]
rvix = rvix[data]
colnames(rvix) =  'rvix'
rvix = rvix[data]
rav = rav[data]
cb = cb[data]
vix = vix[data]
data = index(cb)
oil =oil[data]
vix = vix[data]
crise = crise[data]
cdi = cdi[data]
ret = ret[data]
gold = gold[data]
embi = embi[data]
# transform data in data frame
df = data.frame(ret, vix, cb, crise, cdi, embi, crise2, oil, gold, rav, rvix)
saveRDS(df, 'df.rds')
df = readRDS('df.rds')
#--- Rose library
library(ROSE)
df3 = ovun.sample(as.factor(crise)~., data=df, method="both", p=0.5,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
df3 = data.frame(df3$data)
prop.table(table(df3$crise))
View(df)
model4 = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3 , trControl = control_train,
method='nnet', threshold = 0.6)
model4
model4 = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3 ,
trControl = control_train,
method='nnet', threshold = 0.3)
model4
confusionMatrix(model4)
model4 = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi + gold, data=df3 ,
trControl = control_train,
method='nnet', threshold = 0.3)
warnings()
model4
model4 = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + gold, data=df3 ,
trControl = control_train,
method='nnet', threshold = 0.3)
model4 = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + gold, data=df3,
trControl = control_train,
method='nnet', threshold = 0.3,
maxit=1000,
weights=1000)
model4 = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + gold, data=df3,
trControl = control_train,
method='nnet', threshold = 0.3,
maxit=1000
)
model4
confusionMatrix(model4)
model4 = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + gold, data=df3,
trControl = control_train,
method='nnet', threshold = 0.3,
maxit=1000,
MaxNWts=84581
)
model4
confusionMatrix(model4)
model4 = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + gold, data=df3,
trControl = control_train,
method='nnet', threshold = 0.3,
maxit=1000,
#MaxNWts=84581
)
confusionMatrix(model4)
confusionMatrix(model4)
View(model4)
model4[["finalModel"]]
model4$finalModel
plot(model4)
plot(model4$finalModel)
library(neuralnet)
NN= neuralnet(as.factor(crise) ~  ret^2 + rav + oil + cb + embi + gold, data=df3,
hidden = 3, linear.output = T)
NN = neuralnet(crise ~  ret^2 + rav + oil + cb + embi + gold, data=df3,
hidden = 3, linear.output = T)
NN = neuralnet(crise ~  ret + rav + oil + cb + embi + gold, data=df3,
hidden = 3, linear.output = T)
model4 = train(as.factor(crise) ~ ret^2 + rvix + oil + cb + embi + gold, data=df3,
trControl = control_train,
method='nnet', threshold = 0.3,
maxit=1000,
#MaxNWts=84581
)
confusionMatrix(model4)
model4 = train(as.factor(crise) ~ ret^2 + rvix + oil + cb + embi + cdi, data=df3,
trControl = control_train,
method='nnet', threshold = 0.3,
maxit=1000,
#MaxNWts=84581
)
confusionMatrix(model4)
model_a = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trControl = control_train,
method='nnet', threshold = 0.3,
maxit=1000,
#MaxNWts=84581
)
model_a
confusionMatrix(model_a)
model_a = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trControl = control_train,
method='nnet', threshold = 0.3,
maxit=1000,
MaxNWts=10000
)
confusionMatrix(model_a)
par(mar=numeric(4),mfrow=c(1,2),family='serif')
plot(model_a,nid=F)
plot(model_a)
plot(model_a,nid=F)
par(mar=numeric(4),mfrow=c(1,2),family='serif')
plot(model_a,nid=F)
plot(model_a)
par(mar=numeric(4),mfrow=c(1,2),family='serif')
plot(model_a,nid=F)
plot(model_a)
model_a = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trControl = control_train,
method='nnet', threshold = 0.3,
maxit=1000,
MaxNWts=10000,
lineout = T,
size = 3
)
model_a = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trControl = control_train,
method='nnet', threshold = 0.3,
maxit=1000,
MaxNWts=10000,
size = 3
)
model_a = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trControl = control_train,
method='nnet', threshold = 0.3,
maxit=1000,
MaxNWts=1000,
mectric = 'ROC'
)
model_a
confusionMatrix(model_a)
model_a = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trControl = control_train,
method='nnet', threshold = 0.7,
maxit=1000,
MaxNWts=1000,
mectric = 'ROC'
)
confusionMatrix(model_a)
model_a
model_a = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trControl = control_train,
method='nnet', threshold = 0.7,
maxit=1000,
MaxNWts=3000,
mectric = 'ROC'
)
model_a
confusionMatrix(model_a)
model_a = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trControl = control_train,
method='nnet', threshold = 0.3,
maxit=1000,
MaxNWts=2000,
metric = 'ROC'
)
model_a = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trControl = control_train,
method='nnet', threshold = 0.3,
maxit=1000,
MaxNWts=2000
)
confusionMatrix(model_a)
model_a
par(mfrow=(c(1,2)))
plot(as.vector(1-cmts), type='l', ylim=c(0,1))
lines(as.vector(crise))
plot(as.vector(1-cmts), type='l', ylim=c(0,1))
lines(crise2)
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<var1, 1, 0)
pos = which(crise==1)   # pegar a posição onde crise== 1
pos
for(i in 2:length(pos)){
crise[(pos[i]-12):pos[i]] = 1
}
table(crise)
prop.table(table(crise))
crise = xts(crise, order.by = data1)
colnames(crise) = 'crise'
# var2
crise2 = matrix(nrow = length(cmts))
crise2 = ifelse(cm2<var2, 1, 0)
pos2 = which(crise2==1)   # pegar a posição onde crise== 1
pos2
for(i in 2:length(pos2)){
crise2[(pos2[i]-12):pos2[i]] = 1
}
par(mfrow=(c(1,2)))
plot(as.vector(1-cmts), type='l', ylim=c(0,1))
lines(as.vector(crise))
plot(as.vector(1-cmts), type='l', ylim=c(0,1))
lines(crise2)
par(mfrow=(c(1,2)))
plot(as.vector(1-cmts), type='l', ylim=c(0,1))
lines(as.vector(crise))
plot(as.vector(1-cmts), type='l', ylim=c(0,1))
lines(crise2)
par(mfrow=(c(1,2)))
plot(as.vector(1-cmts), type='l', ylim=c(0,1))
lines(as.vector(crise))
plot(as.vector(1-cmts), type='l', ylim=c(0,1))
lines(crise2)
par(mfrow=(c(1,2)))
plot(as.vector(1-cmts), type='l', ylim=c(0,1), main='CMAX and Crisis VaR 5%', ylab='CMAX and Crisis')
lines(as.vector(crise))
plot(as.vector(1-cmts), type='l', ylim=c(0,1), main='CMAX and Crisis VaR 10%', ylab='CMAX and Crisis')
lines(crise2)
confusionMatrix(model_a)
model_b = train(as.factor(crise) ~ ret^2 + rvix + oil + cb + embi + cdi, data=df3 ,
trControl = control_train,
method='nnet',
threshold = 0.3,
maxit=1000,
MaxNWts=2000)
model3
model_b
confusionMatrix(model_b)
model3 = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trControl = control_train,
method='multinom',
family='binomial')
model3
confusionMatrix(model3)
model5 = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
method='svmRadial')
model5
confusionMatrix(model5)
model6 = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trControl = control_train,
method='knn')
model6
confusionMatrix(model6)
model6 = train(as.factor(crise) ~ ret^2 + rvix + oil + cb + embi + cdi, data=df3,
trControl = control_train,
method='knn')
confusionMatrix(model6)
model2 = train(as.factor(crise) ~ ret^2 + rvix + oil + cb + embi + cdi, data=df3,
trControl = control_train, method='rf')
model2 = train(as.factor(crise) ~ ret^2 + rvix + oil + cb + embi + cdi, data=df3,
trControl = control_train, method='rf')
model2
model2 = train(as.factor(crise) ~ ret^2 + rvix + oil + cb + embi + cdi, data=df3,
trControl = control_train, method='rf')
model2
confusionMatrix(model2)
model_f = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trControl = control_train,
method='knn')
model_f
model_h = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trControl = control_train, method='rf')
model_h
confusionMatrix(model_h)
model_g = train(as.factor(crise) ~ ret^2 + rvix + oil + cb + embi + cdi, data=df3,
trControl = control_train, method='rf')
model_g
confusionMatrix(model_g)
model_i = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trainControl = control_train, method='nb') # nb = Naive Bayes
model_i = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trainControl = control_train, method='nb') # nb = Naive Bayes
model_i
warnings()
control_train2 = trainControl(method = 'cv', number = 10)    # ten fold
model_i = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trainControl = control_train2,
method='nb') # nb = Naive Bayes
warnings()
control_train2 = trainControl(method = 'cv')    # ten fold
model_i = train(as.factor(crise) ~ ret^2 + rav + oil + cb + embi + cdi, data=df3,
trainControl = control_train2,
method='nb') # nb = Naive Bayes
