as.numeric(rav) +
as.numeric(embi),
family = 'binomial',  data=df3[-2,])
summary(model)
model =glm(as.factor(crise) ~  gold  + oil +  cdi +
rav +
as.numeric(embi),
family = 'binomial',  data=df3[-2,])
summary(model)
plot(df3$rav)
plot(df3$rav, type = 'l')
model =glm(as.factor(crise2) ~  gold  + oil +  cdi +
rav +
as.numeric(embi),
family = 'binomial',  data=df3[-2,])
summary(model)
model =glm(as.factor(crise2) ~  gold  + oil +  cdi +
rav + cb +
as.numeric(embi),
family = 'binomial',  data=df3[-2,])
summary(model)
model =glm(as.factor(crise) ~  gold  + oil +  cdi +
rav + cb +
as.numeric(embi),
family = 'binomial',  data=df3[-2,])
summary(model)
View(df)
summary((df3$rav))
ablines(h=0)
lines(h=0)
line(h=0)
lines(h=0)
ablines(h=0)
abline(h=0)
abline(h=2)
abline(crise)
plot(df$rav, type = 'l')
abline(h=0)
line(df$crise)
lines(df$crise)
plot(df$vix, type = 'l')
abline(h=0)
lines(df$crise)
plot(df$vix/100, type = 'l')
abline(h=0)
lines(df$crise)
plot(df$vix/100, type = 'l', xlim = c(0,1))
abline(h=0)
lines(df$crise)
plot(df$vix/100, type = 'l', ylim = c(0,1))
abline(h=0)
lines(df$crise)
plot(df$av, type = 'l')
abline(h=0)
lines(df$crise)
abline(h=0)
lines(df$crise)
plot(df$av/10, type = 'l')
abline(h=0)
lines(df$crise)
plot(as.numeric(df$av)/10, type = 'l')
abline(h=0)
lines(df$crise)
plot(as.numeric(df$av)/10, type = 'l', ylim = c(0,1))
abline(h=0)
lines(df$crise)
library(quantmod)
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
ret = diff(log(ibov))
library(xlsx)
write.xlsx(ret, "D:/Git projects/college_works/eco_fin/ret.xlsx")
0.866744**2
plot(as.numeric(df$rav)/10, type = 'l', ylim = c(0,1))
plot(as.numeric(df$rav), type = 'l')
View(df)
View(df)
read.csv(av)
read.csv('av.csv', header = T, sep = ',', )[,1:2]
read.csv('av.csv', header = T, sep = ',', )[,1:2]
av = read.csv('av.csv', header = T, sep = ';', )[,1:2]
View(av)
colnames(av) = c('date', 'av')
plot(av)
summary(av)
av$av = as.numeric(av$av)
plot(av)
plot(av$av)
plot(av$av, type = 'l')
plot(-av$av, type = 'l')
View(av)
av$date = as.Date(av$date, format = '%d/%m/%Y')
plot(-av$av, type = 'l')
setwd("D:/Git projects/college_works/eco_fin")
#------------- CMAX Function
# w é o tamanho da janela
# n é a quantidade de janelas
# s é o vetor que vou passar a função
CMAX = function(w, n, s){
l = matrix(nrow=n,ncol = (w+1))
max = matrix(nrow=n, ncol = 1)
cmax = matrix(nrow=n, ncol = 1)
for (j in 1:n){
l[j, 1:(w+1)] = s[j:(w+j)]
max[j] = max(l[j, 1:(w+1)])
cmax[j] = l[j, (w+1)]/max(max[j])
}
return(cmax)
}
#### get first day
firstDayMonth=function(x)
{
x=as.Date(as.character(x))
day = format(x,format="%d")
monthYr = format(x,format="%Y-%m")
y = tapply(day,monthYr, min)
first=as.Date(paste(row.names(y),y,sep="-"))
#as.factor(first)
as.Date(first)
}
# Libraries
library(lubridate)
library(tseries)
library(timeSeries)
library(quantmod)
library(fGarch)
library(GetBCBData)
library(ipeadatar)
library(knitr);
library(tidyr);
library(dplyr);
library(DT);
library(magrittr)
library(data.table)
# Get data
ibov = getSymbols('^BVSP', src='yahoo',
from= '1999-01-01',
to = '2020-05-01',
periodicity = "monthly",    # IBOV mensal
auto.assign = F)[,4]
colnames(ibov) = 'ibov'
ibov = ibov[is.na(ibov)==F]
# VIX
vix = getSymbols('^VIX', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
to = '2020-05-01',
auto.assign = F)[,4]
colnames(vix) = 'vix'
rvix = diff(log(vix))
colnames(rvix) =  'rvix'
# Oil price
oil = getSymbols('CL=F', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
to = '2020-05-01',
auto.assign = F)[,4]
colnames(oil) = 'oil'
# Gold price
gold = getSymbols('GC=F', src='yahoo',
periodicity = "monthly",
from= '2000-01-01',
to = '2020-05-01',
auto.assign = F)[,4]
colnames(gold) = 'gold'
# 11768 - Índice da taxa de câmbio real (INPC)
cb = gbcbd_get_series(11768, first.date= '2000-01-01', last.date = '2020-05-01',
format.data = "long", be.quiet = FALSE)[ ,1:2]
data = cb$ref.date
cb[,1]=NULL
cb = xts(cb, order.by = data)
rownames(cb) = data    # colocar a data como índice
colnames(cb) = 'cb'
# cdi
cdi = gbcbd_get_series(4391, first.date= '2000-01-01', last.date = '2020-05-01',
format.data = "long", be.quiet = FALSE)[ ,1:2]
data = cdi$ref.date
cdi[,1]= NULL
cdi = xts(cdi, order.by = data)
rownames(cdi) = data    # colocar a data como índice
colnames(cdi) = 'cdi'
## EMBI
embi_search = as.data.frame(search_series(terms = c('EMBI'), fields = c("name"),language = c("br")))
embi_search %<>% dplyr::slice(1:500L)
datatable(embi_search)
embi = ipeadata(c('JPM366_EMBI366'))[,2:3]
colnames(embi) = c('date', 'embi')
k= firstDayMonth(embi$date)
k = as.Date(k)
k = as.data.frame(k)
colnames(k) = 'date'
setDT(embi)
setDT(k)
embi = embi[k, on = c('date')]
embi$date = as.Date(embi$date)
mday(embi$date) = 1   # transformar os dias do vetor de datas k em 1 (lubridate)
embi = xts(embi, order.by = embi$date)
embi = embi[,-1]
# risk aversion
rav = read.csv('kalman.csv', header = T, sep = ',', )[,1:2]
rav$data = as.Date(rav$data, format = '%m/%d/%Y')
colnames(rav) = c('date', 'rav')
s = firstDayMonth(rav$date)
s = data.frame(s)
colnames(s) = c('date')
setDT(rav)
setDT(s)
rav = rav[s, on = c('date')]
mday(rav$date) = 1   # transformar os dias do vetor de datas  em 1 (lubridate)
rav = xts(rav, order.by = rav$date)
rav = rav[,-1]
ret = diff(log(ibov))
ret = ret[is.na(ret)==F]
colnames(ret) = 'ret'
#------ Using CMAX function
cm2 = CMAX(12,(length(ibov)-12), ibov )
var1 = quantile(cm2, 0.05)
var2 = quantile(cm2, 0.1)
hist(cm2, breaks = 15, col='lightgreen',
probability = T,
main='Histograma para o CMAX diário \n com 24 janelas')
abline(v=var1)
lim = mean(cm2)-2*sd(cm2)
cm2[cm2<lim]
sum((cm2<lim)*1)   # count
# get the data of ibov
data = index(ibov)
data1 = data[13:length(ibov)]
# transform cmax in xts object
cmts = xts(x=cm2, order.by = data1)
#----- Plot CMAX  using ggplot2
library(ggplot2)
windows()
g1 = ggplot(data=cmts, aes(y=`cmts`, x=`data1`))+geom_line(size=1)+
scale_x_date(date_labels="%Y",date_breaks  ="1 year")+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=17),
axis.text.y = element_text(size=17) ) +
ylim(0.4, 1) +
xlab('Anos') + ylab('CMAX') +
#ggtitle('Evolução do CMAX do Ibovespa mensal')+
theme(axis.title.x = element_text(colour = 'black', size=19),
axis.title.y = element_text(colour = 'black', size=19))
#plot.title = element_text(hjust = 0.5, size = 17))
g2 = g1 +
annotate(geom='text', x=as.Date('2008-10-10'), y=0.47, label= 'Crise \n de 2008', size=6) +
annotate(geom='text', x=as.Date('2020-03-10'), y=0.58, label = 'Crise do \n COVID-19', size=6) +
#annotate(geom='text', x=as.Date('2000-03-10'), y=0.6, label = 'Bolha da \n internet') +
annotate(geom='text', x=as.Date('2001-9-13'), y=0.58, label = '11 de \n setembro', size=6) +
geom_hline(yintercept =var2, size=1)
g2
plot(as.vector(cmts), type='l')
abline(h=var2)
#----- Create Dummy
# var1
crise = matrix(nrow = length(cmts))
crise = ifelse(cm2<var1, 1, 0)
pos = which(crise==1)   # pegar a posição onde crise== 1
pos
for(i in 2:length(pos)){
crise[(pos[i]-12):pos[i]] = 1
}
table(crise)
prop.table(table(crise))
crise = xts(crise, order.by = data1)
colnames(crise) = 'crise'
# var2
crise2 = matrix(nrow = length(cmts))
crise2 = ifelse(cm2<var2, 1, 0)
pos2 = which(crise2==1)   # pegar a posição onde crise== 1
pos2
for(i in 2:length(pos2)){
crise2[(pos2[i]-12):pos2[i]] = 1
}
par(mfrow=(c(1,2)))
plot(as.vector(1-cmts), type='l', ylim=c(0,1),
main='CMAX and Crisis VaR 5%',
ylab='CMAX and Crisis')
lines(as.vector(crise))
plot(as.vector(1-cmts), type='l', ylim=c(0,1),
main='CMAX and Crisis VaR 10%',
ylab='CMAX and Crisis')
lines(crise2)
data = index(cmts)
data = data[-c(1, 2)]
crise = xts(crise[-c(1, 2)], order.by = data)
crise2 = xts(crise2[-c(1, 2)], order.by = data)
av = av[data]
rownames(av) = av$date
av = av[,-1]
av = read.csv('av.csv', header = T, sep = ';', )[,1:2]
colnames(av) = c('date', 'av')
av$av = as.numeric(av$av)
av$date = as.Date(av$date, format = '%d/%m/%Y')
rownames(av) = av$date
av = av[ ,-1]
av = read.csv('av.csv', header = T, sep = ';', )[,1:2]
colnames(av) = c('date', 'av')
av$av = as.numeric(av$av)
av$date = as.Date(av$date, format = '%d/%m/%Y')
rownames(av) = av$date
av = av[ ,'av']
av = read.csv('av.csv', header = T, sep = ';', )[,1:2]
colnames(av) = c('date', 'av')
av$av = as.numeric(av$av)
av$date = as.Date(av$date, format = '%d/%m/%Y')
rownames(av) = av$date
is.data.frame(av)
av[ ,'av']
av = as.data.frame( av[ ,'av'])
View(av)
av = read.csv('av.csv', header = T, sep = ';', )[,1:2]
colnames(av) = c('date', 'av')
av$av = as.numeric(av$av)
av$date = as.Date(av$date, format = '%d/%m/%Y')
rownames(av) = av$date
av = av[ ,'av', drop=F]
View(av)
av = av[data]
data = index(cmts)
data = data[-c(1, 2)]
av = av[data]
av
av = av$av[data]
rvix = rvix[data]
rav = rav[data]
cb = cb[data]
vix = vix[data]
data = index(cb)
oil =oil[data]
vix = vix[data]
crise = crise[data]
cdi = cdi[data]
ret = ret[data]
gold = gold[data]
embi = embi[data]
df = data.frame(ret, vix, cb, crise, cdi, embi, crise2, oil, gold, rav, rvix, av)
saveRDS(df, 'df.rds')
df = readRDS('df.rds')
library(ROSE)
df3 = ovun.sample(as.factor(crise)~., data=df, method="both", p=0.50,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
df3 = data.frame(df3$data)
prop.table(table(df3$crise))
#---- Control train
prop.table(table(df3$crise))
df3 = ovun.sample(as.factor(crise)~., data=df, method="both", p=0.50,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
View(df)
av = read.csv('av.csv', header = T, sep = ';', )[,1:2]
colnames(av) = c('date', 'av')
av$av = as.numeric(av$av)
av$date = as.Date(av$date, format = '%d/%m/%Y')
rownames(av) = av$date
View(av)
av = av[ ,'av', drop=F]
View(df)
av[data]
av$av[data]
data
av[data]
av
as.data.frame(av)
av = as.data.frame(av)
av[data]
data
row.names(av)
av[data]
av = read.csv('av.csv', header = T, sep = ';', )[,1:2]
colnames(av) = c('date', 'av')
av$av = as.numeric(av$av)
av$date = as.Date(av$date, format = '%d/%m/%Y')
av$date  = a
a = av$date
xts(av, order.by = a)
av = xts(av, order.by = a)
av = av[ ,'av', drop=F]
av = av$av[data]
df = data.frame(ret, vix, cb, crise, cdi, embi, crise2, oil, gold, rav, rvix, av)
saveRDS(df, 'df.rds')
View(df)
df = readRDS('df.rds')
library(ROSE)
df3 = ovun.sample(as.factor(crise)~., data=df, method="both", p=0.50,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
df3 = data.frame(df3$data)
prop.table(table(df3$crise))
#---- Control train
model =glm(as.factor(crise) ~  gold  + oil +  cdi +
av + cb +
as.numeric(embi),
family = 'binomial',  data=df3[-2,])
model =glm(as.factor(crise) ~  gold  + oil +  cdi +
as.numeric(av) + cb +
as.numeric(embi),
family = 'binomial',  data=df3[-2,])
summary(model)
df3$av = -as.numeric(df3$av)
summary(df3$av)
model =glm(as.factor(crise) ~  gold  + oil +  cdi +
as.numeric(av) + cb +
as.numeric(embi),
family = 'binomial',  data=df3[-2,])
summary(model)
df3$embi = as.numeric(embi)
model =glm(as.factor(crise) ~  gold  + oil +  cdi +
av + cb +
embi,
family = 'binomial',  data=df3[-2,])
summary(model)
model =glm(as.factor(crise) ~  gold  + oil +  cdi +
av + cb,
family = 'binomial',  data=df3[-2,])
summary(model)
model =glm(as.factor(crise) ~  gold  + oil +  cdi +
as.numeric(av) + cb +
as.numeric(embi),
family = 'binomial',  data=df3[-2,])
summary(model)
df3$av = -as.numeric(df3$av)
df3$embi = as.numeric(embi)
model =glm(as.factor(crise) ~  gold  + oil +  cdi +
av + cb,
family = 'binomial',  data=df3[-2,])
summary(model)
model =glm(as.factor(crise) ~  gold  + oil +  cdi +
av + cb + embi,
family = 'binomial',  data=df3[-2,])
summary(model)
model =glm(as.factor(crise) ~  gold  + oil +  cdi +
av  + embi,
family = 'binomial',  data=df3[-2,])
summary(model)
library(ROSE)
df3 = ovun.sample(as.factor(crise)~., data=df, method="both", p=0.50,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
df3 = data.frame(df3$data)
prop.table(table(df3$crise))
model =glm(as.factor(crise) ~  gold  + oil +  cdi +
av + cb +
as.numeric(embi),
family = 'binomial',  data=df3[-2,])
summary(model)
model =glm(as.factor(crise) ~  gold  + oil +  cdi +
as.numeric(av) + cb +
as.numeric(embi),
family = 'binomial',  data=df3[-2,])
summary(model)
df3$av = -as.numeric(df3$av)
model =glm(as.factor(crise) ~  gold  + oil +  cdi +
as.numeric(av) + cb +
as.numeric(embi),
family = 'binomial',  data=df3[-2,])
summary(model)
plot(as.numeric(df$av), type = 'l')
abline(h=0)
lines(df$crise)
plot(as.numeric(df$av), type = 'l', ylim=c(0,1))
abline(h=0)
lines(df$crise)
plot(as.numeric(df$av), type = 'l')
abline(h=0)
lines(df$crise)
plot(as.numeric(-df$av), type = 'l')
abline(h=0)
lines(df$crise)
plot(-as.numeric(df$av), type = 'l')
abline(h=0)
lines(df$crise)
plot(df$vix/100, type = 'l', ylim = c(0,1))
abline(h=0)
lines(df$crise)
plot(-as.numeric(df$av), type = 'l')
abline(h=0)
lines(df$crise)
plot(-2*as.numeric(df$av), type = 'l')
abline(h=0)
lines(df$crise)
plot(-3*as.numeric(df$av), type = 'l')
abline(h=0)
lines(df$crise)
rf = randomForest(as.factor(crise) ~  gold  + oil +  cdi + vix + embi + cb, data=df3)
library(randomForest)
rf = randomForest(as.factor(crise) ~  gold  + oil +  cdi + vix + embi + cb, data=df3)
importance(rf)
rf = randomForest(as.factor(crise) ~  gold  + oil +  cdi + vix + embi + cb + av, data=df3)
rf = randomForest(as.factor(crise) ~  gold  + oil +  cdi  + embi + cb + av, data=df3)
importance(rf)
varImpPlot(rf)
rf = randomForest(as.factor(crise) ~   oil +  cdi  + embi + cb + av, data=df3)
importance(rf)
varImpPlot(rf)
plot(-3*as.numeric(df$av), type = 'l')
abline(h=0)
lines(df$crise)
rf = randomForest(as.factor(crise) ~  gold  + oil +  cdi  + embi + cb + 10*av, data=df3)
rf = randomForest(as.factor(crise) ~  gold  + oil +  cdi  + embi + cb + (10*av), data=df3)
rf = randomForest(as.factor(crise) ~  gold  + oil +  cdi  + embi + cb + av, data=df3)
importance(rf)
varImpPlot(rf)
model_d = train(as.factor(crise) ~  gold + embi + oil + cb  + cdi, data=df3,
trControl = control_train,
method='multinom',
family='binomial')
