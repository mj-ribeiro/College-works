f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 30000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 30000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 30000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 30000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 30000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 30000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 30000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 30000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 30000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 300000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 300000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 300000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 300000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 300000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 300000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 500000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 500000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 500000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 500000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 500000
s = 0
nn = 100
I = c()
for (j in 1:nn) {
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
I[j] = (t_max - t_min)/n *s
}
mean(I)
sd(I)
hist(I)
for (j in 1:nn) {
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
I[j] = (t_max - t_min)/n *s
}
mean(I)
sd(I)
hist(I, breaks = 30, col='lightgreen')
hist(I, breaks = 30, col='lightgreen', main='Histogram of Integral values')
m = 1e+5
y = numeric(m)
phi = numeric(m)
curve(rbeta(x, 2, 2))
curve(pbeta(x, 2, 2))
curve(pbeta(x, 2, 20))
curve(pbeta(x, 2, 2))
curve(pbeta(x, 20, 2))
curve(pbeta(x, 10, 2))
curve(pbeta(x, 10, 20))
m = 1e+5
y = numeric(m)
phi = numeric(m)
for(i in 1:m){
phi[i] = rbeta(1, 2, 2)
y[i] = rbinom(1, size = 10, phi[i])
}
phi = rbeta(1, 2, 2)
y = rbinom(1, size = 10, phi)
hist(phi)
hist(y)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 1, 0.3)
rbinom(1, size = 1, 0.3)
rbinom(1, size = 1, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
table(y)
phi = rbeta(1, 2, 2)
y = rbinom(1, size = 10, phi)
table(y)
hist(y)
y = rbinom(1, size = 10, phi)
table(y)
phi = rbeta(m, 2, 2)
y = rbinom(m, size = 10, phi)
table(y)
table(y)/m
plot(table(y)/m)
plot(table(y)/m, main='Beta Binomial distribution of y')
plot(table(y)/m, main='Beta Binomial distribution of y', ylabel='Probability')
plot(table(y)/m, main='Beta Binomial distribution of y', ylab='Probability')
plot(table(y)/m, main='Beta Binomial distribution of y')
plot(table(y)/m, main='Beta Binomial distribution of y', ylab='Probability')
plot(table(y)/m, main='Beta Binomial distribution of y', ylab='Probability')
81/256
81/256*1500
500/474.61
1.053497^(-1/4)
81/256*1500*2^(-4)
(1.5*0.03)/0.03
1.5^2
0.76+2.26
0.76+3.78
1/0.987
500^0.25
500^0.25* 1500^(-1/4)
500^0.25* 1500^(-1/4)*3/4
1.054^(-1/4)
81/256*1500
81/256*1500
500/(81/256*1500)
(500/(81/256*1500) )^(-1/4)
500^(1/4)*1500^(-1/4)*(86/256)^(1/4)
500/1500
81/256
0.33333/0.3164
(1500/(81/256*500) )^(-1/4)
(1500/(81/256*500) )
(1500/(81/256*500) )^(-1/4)
81/256*500*2^(-4)
10/17
0.6*17
1/(1-0.68)
120/18
9*0.6
8*0.6
exp(4.76)
exp(4.7592)
0.13*19
exp(4.31)
exp(4.3)
exp(4.29)
exp(4.2866)
exp(4.2834)
exp(3.31)
exp(2.14)
exp(3.196)
exp(12.3)
exp(3.196)
exp(3.15)
exp(2.61)
exp(2.6)
exp(2.3819)
exp(2.3196)
exp(2.28)
exp(2.22)
exp(2.2195)
exp(1.95)
exp(1.84)
exp(0.1951)
exp(0.177)
exp(0.14)
exp(0.1491)
exp(0.0969)
exp(0.0674)
exp(0.0627)
exp(0.0556)
exp(0.0532)
exp(0.0532)
exp(0.0531)
exp(0.0491)
exp(0.041)
exp(0.0242)
exp(0.0188)
exp(-0.0173)
setwd("D:/Git projects/college_works/eco_fin")
# functions
metrics = function(cm){
acurácia = (cm[["table"]][1,1] + cm[["table"]][2,2])/sum(cm[["table"]])
cpc = cm[["table"]][2,2] / ( cm[["table"]][1,2] + cm[["table"]][2,2] )
epc = cm[["table"]][1,1] / ( cm[["table"]][2,1] + cm[["table"]][1,1] )
sensibilidade = cm[["table"]][1,1] / ( cm[["table"]][1,1] + cm[["table"]][2,1] )
especificidade = cm[["table"]][2,2] /( cm[["table"]][2,2] + cm[["table"]][1,2] )
G = sqrt(sensibilidade*especificidade)
LP = sensibilidade/(1 - especificidade)
LR = (1 - sensibilidade)/(especificidade)
DP = sqrt(pi)/3 * ( log(sensibilidade/(1 - sensibilidade) ) + log( especificidade/(1 - especificidade) )  )
gamma = sensibilidade - (1 - especificidade)
BA = (1/2) * (sensibilidade + especificidade)
métricas = data.frame(acurácia, cpc, epc, sensibilidade, especificidade, G, LP, LR, DP, gamma, BA)
}
# libraries
library('xtable')
library(caret)
library(ROSE)
library('randomForest')
library(MLeval) # to get ROC curve
#--- load variables
df1 = readRDS('df.rds')
#df$rexc = as.numeric(df$rexc)
#df$embi = as.numeric(df$embi)
keep = c('crise2', 'gold',  'embi',  'oil', 'cb', 'rexc',  'cdi')
df6 = df1[,keep]
### correlation
correl = round(cor(df6[,-c(1)]), 4 )
print(xtable(correl, type = "latex", digits=4), file = "correl.tex")
#--- Rose library
library(ROSE)
df3 = ovun.sample(as.factor(crise2)~., data=df6, method="both", p=0.50,
subset=options("subset")$subset,
na.action=options("na.action")$na.action, seed=1)
df3 = data.frame(df3$data)
prop.table(table(df3$crise2))
df3$crise2 = ifelse(df3$crise2==1, 'yes', 'no')
#---- Control train
control_train = trainControl(method = 'repeatedcv',
number = 10,
repeats = 10,
savePredictions = TRUE,
classProbs = TRUE,
verboseIter = TRUE)    # ten fold
m2 = glm(crise2~as.numeric(df6$rexc) + gold + cdi + cb + oil + as.numeric(embi), data=df6, family = 'binomial')
summary(m2)
rf = randomForest(as.factor(crise2) ~ rexc   + oil +  cdi + cb + embi + gold, data=df6, importance=T)
rf
rf$importance
imp = rf$importance
View(imp)
imp = rf$importance[4]
imp = rf$importance[,4]
imp[1] = 19.5254
r_names = c('AV', 'Petróleo', 'CDI', 'INPC', 'EMBI', 'Ouro')
rownames(imp) = r_names
rownames(imp) = r_names.T
rownames(imp) = T(r_names)
row.names(imp) = r_names
row.names(imp) = t(r_names)
length(imp)
length(r_names)
imp = rf$importance
imp[1, 4] = 19.5254
r_names = c('AV', 'Petróleo', 'CDI', 'INPC', 'EMBI', 'Ouro')
row.names(imp) = r_names
imp = imp[,4]
sort(imp)
sort(imp, decreasing = F)
sort(imp, decreasing = T)
imp = sort(imp, decreasing = T)
plot(imp)
ggplot(imp, aes(V1)) + geom_point(r_names)
ggplot(imp, aes(V1))
varImpPlot(rf)
ggplot(imp, aes(V1) )
ggplot(imp, aes(V1, r_names) )
str(imp)
imp = sort(imp, decreasing = T)
imp = data.frame(imp)
ggplot(imp, aes(V1, r_names) )
ggplot(imp, aes(imp, r_names) )
ggplot(imp, aes(imp, r_names) )  + geom_point()
imp
ggplot(imp, aes(imp) )  + geom_point()
ggplot(imp, aes(imp) )  + geom_point(aes(r_names))
ggplot(imp, aes(imp, r_names) )  + geom_point()
colnames(imp) = 'variáveis'
ggplot(imp, aes(variáveis, r_names) )  + geom_point()
ggplot(imp, aes(r_names, variáveis) )  + geom_point()
imp = rf$importance
imp[1, 4] = 19.5254
r_names = c('AV', 'Petróleo', 'CDI', 'INPC', 'EMBI', 'Ouro')
length(imp)
length(r_names)
row.names(imp) = r_names
imp = imp[,4]
imp = data.frame(imp)
colnames(imp) = 'variáveis'
ggplot(imp, aes(r_names, variáveis) )  + geom_point()
ggplot(imp, aes(variáveis, r_names) )  + geom_point()
ggplot(imp, aes(variáveis, r_names) )  + geom_point(size=0.9)
ggplot(imp, aes(variáveis, r_names) )  + geom_point(size=1.5)
ggplot(imp, aes(variáveis, r_names) )  + geom_point(size=2)
ggplot(imp, aes(variáveis, r_names) )  + geom_point(size=2, col='blue')
vimp = ggplot(imp, aes(variáveis, r_names) ) +
geom_point(size=2, col='blue') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=17),
axis.text.y = element_text(size=17),
axis.title.x = element_text(colour = 'black', size=19),
axis.title.y = element_text(colour = 'black', size=19),
legend.title=element_blank(),
legend.text = element_text(colour="black", size = 17),
legend.position="bottom" ) +
xlab('Diminuição média no Gini') +
ylab('Variáveis')
vimp
