plot(rnorm(30), col='lightblue')
curve((x), xlim = c(-1,1), add=T)
curve((x), xlim = c(-1,1), add=T)
curve((x), xlim = c(-1,1))
plot(rnorm(30), col='lightblue')
plot(rnorm(30,0,1), col='lightblue')
plot(rnorm(30,0,1), col='lightblue')
curve((x), add=T)
plot(rnorm(30,0,1), col='lightblue')
curve((x^2), add=T)
curve((x+2), add=T)
curve((x+2X), add=T)
curve((x+2x), add=T)
curve((x+2*x), add=T)
curve((x+2*x), add=T)
plot(rnorm(30,0,1), col='lightblue')
curve((x+2*x), add=T)
curve((2*x+2*x), add=T)
curve((0.8*x+2*x), add=T)
curve((0.01x), add=T)
curve((0.01*x), add=T)
curve((0.1*x), add=T)
plot(abs(rnorm(30,0,1)), col='lightblue')
curve((0.1*x), add=T)
plot(abs(rnorm(30,0,1)), col='gray')
curve((0.1*x), add=T)
plot(abs(rnorm(30,0,1)), col='gray', lwd=19)
curve((0.1*x), add=T)
plot(abs(rnorm(30,0,1)), col='gray', lwd=19, size=3)
plot(abs(rnorm(30,0,1)), col='gray', lwd=19)
curve((0.1*x), add=T)
plot(abs(rnorm(30,0,1)), col='gray', lwd=19)
curve((0.1*x), add=T, col='red')
curve(dnorm(x))
curve(dnorm(x), xlim=c(-1,1))
curve(dnorm(x), xlim=c(-3,3))
curve(dnorm(x), xlim=c(-4,4))
curve(dnorm(x), xlim=c(-6,6))
curve(dnorm(x), xlim=c(-8,8))
write.csv(ret, 'ret')
write.table(ret, 'ret')
write.xlsx(ret, 'ret')
library(xlsx)
write.xlsx(ret, 'ret')
write.xlsx(ret, 'c:/ret.xlsx')
write.xlsx(ret,"C:/Users/user/Documents/ret.xlsx")
spec2 = ugarchspec(variance.model=list(model="sGARCH",
garchOrder=c(1,1)),
mean.model=list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model="norm")
garch3 = ugarchfit(spec = spec2, data= ret)
garch3
spec1 = ugarchspec(variance.model=list(model="fGARCH",
garchOrder=c(1,1), submodel='TGARCH'),
mean.model=list(armaOrder=c(0,0), include.mean=TRUE, archm=T),
distribution.model="norm")
garch2 = ugarchfit(spec = spec1, data= ret)
garch2
sd(ret)
library(sn)
curve(dsn(x))
curve(dsn(x), ylim=c(-8,8))
curve(dsn(x), ylim=c(0,8))
curve(dsn(x, xi = 2), ylim=c(0,8))
curve(dsn(x, xi = 2, omega = 0.2, alpha = 0.22), ylim=c(0,8))
curve(dsn(x, xi = 2, omega = 0.2, alpha = 0.22))
curve(dsn(x, xi = 22, omega = 0.2, alpha = 0.22))
curve(dsn(x, omega = 0.2, alpha = 0.22))
curve(dsn(x, omega = 3, alpha = 0.22))
curve(dsn(x, omega = 8, alpha = 0.22))
curve(dsn(x, omega = 8, alpha = 0.22), , ylim=c(0,8))
curve(dsn(x, omega = 8, alpha = 0.22), , ylim=c(-8,8))
curve(dsn(x, omega = 8, alpha = 0.22), , ylim=c(0,8))
curve(dsn(x, omega = 8, alpha = 0.22), , ylim=c(0,0.8))
curve(dsn(x, omega = 8, alpha = 0.22))
curve(dsn(x, omega = 0.11, alpha = 0.22))
curve(dsn(x, omega = 0.21, alpha = 0.22))
curve(dsn(x, omega = 0.41, alpha = 0.22))
curve(dsn(x, omega = 0.1, alpha = 0.22))
curve(dsn(x, omega = 0.1, alpha = 2))
curve(dsn(x, omega = 0.1, alpha = 10))
curve(dsn(x, omega = 0.1, alpha = 100))
curve(dsn(x, omega = 0.1, alpha = 0.011))
curve(dst(x, omega = 0.1, alpha = 0.011))
curve(dst(x, omega = 1, alpha = 0.011))
curve(dst(x, omega = 1, alpha = 0.11))
curve(dst(x, omega = 1, alpha = 11))
curve(dst(x, omega = 0.9, alpha = 11))
curve(dst(x, omega = 0.11, alpha = 11))
curve(dst(x, omega = 0.11, alpha = 0.11))
rst(x, omega = 0.11, alpha = 0.11))
rst(100, omega = 0.11, alpha = 0.11))
rst(100, omega = 0.11, alpha = 0.11)
rst(100, omega = 0.2, alpha = 0.11, xi = 2)
rst(100, omega = 0.2, alpha = 0.11, xi = 0)
rst(100, omega = 0.2, alpha = 0.11, xi = 0, nu = 2)
sin(30)
sin(30°)
sin(30)
sin(pi/6)
tan(pi/6)
curve(sin(x))
curve(sin(x), xlim = c(-3,3))
curve(sin(x), xlim = c(-30,30))
curve(sin(x), xlim = c(-10,10))
line(h=0)
aline(h=0)
abline(h=0)
curve(tan(x), xlim = c(-10,10))
curve(tan(x), xlim = c(-10,10))
abline(h=0)
curve((x), xlim = c(-10,10))
abline(v=0)
curve((x), xlim = c(0,10))
abline(v=0)
abline(v=10)
curve((x), xlim = c(0,10))
abline(v=10)
atan(1)
atan(pi)
pi/4
tan(pi/3)
tan(2*pi/3)
fd = function(x, alpha){
disf = exp(-x^alpha)
}
fd(2, 1)
fd = function(x, alpha){
disf = exp(-x^alpha)
return(disf)
}
fd(2, 1)
fd(0.2, 1)
curve(fd(x, 1))
curve(fd(x, 1), xlim = c(-10,10))
fd = function(x, alpha){
disf = exp(-x^(-alpha))
return(disf)
}
curve(fd(x, 1), xlim = c(-10,10))
curve(fd(x, 1), xlim = c(0,10))
curve(fd(x, 1), xlim = c(0,4))
install.packages('Rtolls40')
install.packages('Rtolls')
library(installr)
updateR()
updateR()
install.packages('Rtolls')
install.packages(c("fGarch", "forecast", "installr", "quantmod", "rugarch", "timeSeries", "tseries", "vars", "xlsx"))
install.packages('Rtolls')
install.packages('Rtolls40')
install.packages('rtolls40')
curve(x^0.4)
curve(x^0.4, ylim = c(0, 4))
curve(x^0.4, ylim = c(0, 1))
curve(x^0.2, ylim = c(0, 1))
curve(x^0.1, ylim = c(0, 1))
curve(x^0.01, ylim = c(0, 1))
curve(x^0.001, ylim = c(0, 1))
curve(x^0.1, ylim = c(0, 1))
curve(x^1, ylim = c(0, 1))
curve(x^0.1, ylim = c(0, 1))
curve(x^0.2, ylim = c(0, 1))
curve(x^0.4, ylim = c(0, 1), add=T)
install.packages("knitr")
install.packages("readxl")
# Defining my work diretory
setwd("C:/Users/user/Downloads/ML_work/Algorithm")
library(readxl)
teste <- read_excel("teste.xlsx")
teste$foot = NULL
df2 = teste[,'sex']
teste[,'sex']=NULL
teste$sex = df2
teste = data.frame(teste)
#--- function
naive_marcos2 = function(k, df){
df = as.data.frame(df)
#fator =  factor(df[,k])
a = prop.table(table(df[ ,k]))
ta = length(a)
nm = rownames(a)
print('Marcos Naive Bayes Classifier for Discrete Predictors')
cat('A-priori probabilities:\n')
#df2 = df[ , k]
print(a)
#df[ ,k] = NULL
#col_n = colnames(df)
#df[,k] = df2
M = array(0, dim = c(2,2, ta))
m = matrix(0, 2, 2)
for(g in 1:ta){
m1 = as.matrix(tapply(df[,1], df[,k], mean)[g])
v1 = as.matrix(tapply(df[,1], df[,k], sd)[g])
m2 = tapply(df[,2], df[,k], mean)[g]
v2 = tapply(df[,2], df[,k], sd)[g]
m = matrix(c(m1, m2, v1, v2)  )
M[, ,g] = m
cat(nm[g], '\n')
print(M[, ,g])
}
return(M)
}
cc = naive_marcos2('sex', teste)
library(readxl)
teste <- read_excel("teste.xlsx")
setwd("C:/Users/user/Downloads/ML_work/Algorithm")
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/Git projects/college_works/ML_1")
library(knitr)
library(kableExtra)
#options(kableExtra.latex.load_packages = FALSE)
library(magrittr)
knitr:: kable(a, booktabs = T) %>%kable_styling(full_width = T) %>%
column_spec(1, width = "8cm")
library(magrittr)
knitr::kable(a)
library(tinytex)
remove.packages("tinytex", lib="~/R/win-library/4.0")
install.packages('tinytex')
knit_with_parameters('C:/Users/user/Downloads/ML_work/testemarkdown/MJ_Ribeiro.Rmd')
library(tinytex)
library(tinytex)
2.8*4
1,2/11.2
1.2/11.2
source('D:/Git projects/college_works/eco_fin/algoritms_ecofin_SEMRAV.R')
métricas = data.frame(matrix(, nrow=5, ncol=10))
row.names(métricas) = c('Logit', 'Redes neurais','SVM', 'Random Forests', 'XGboost')
colnames(métricas) = c("Acurácia", "CPC", "Sensibilidade", "Especificidade", "G", "LP", "LR", "DP", "gamma", "BA")
métricas[1, ] = metrics(cm_ml)
métricas[2, ] = metrics(cm_nn)
métricas[3, ] = metrics(cm_svm)
métricas[4, ] = metrics(cm_rf)
métricas[5, ] = metrics(cm_xg)
métricas = round( métricas, 4)
métricas = t(métricas)
métricas
m2 = métricas
source('D:/Git projects/college_works/eco_fin/algoritms_ecofin_RAV.R')
métricas
m3 = métricas
m2
m3
model_a = train(as.factor(crise) ~  gold + embi + oil + cb + rav + cdi, data=df3,
trControl = control_train,
method='nnet', threshold = 0.3,
maxit=1000,
MaxNWts=1500
)
cm_NN = confusionMatrix(model_a)
métricas = data.frame(matrix(, nrow=5, ncol=10))
row.names(métricas) = c('Logit', 'Redes neurais','SVM', 'Random Forests', 'XGboost')
colnames(métricas) = c("Acurácia", "CPC", "Sensibilidade", "Especificidade", "G", "LP", "LR", "DP", "gamma", "BA")
métricas[1, ] = metrics(cm_ml)
métricas[2, ] = metrics(cm_NN)
métricas[3, ] = metrics(cm_svm)
métricas[4, ] = metrics(cm_rf)
métricas[5, ] = metrics(cm_xg)
métricas = round( métricas, 4)
métricas = t(métricas)
m2
m3
m3=métricas
m2
m3
source('D:/Git projects/college_works/eco_fin/algoritms_ecofin_SÓRAV.R')
m4 = métricas
m4
m2
m4
m2
m3
m4
plot(model_k)
ggplot(model_k)
ggplot(model_k) + scale_x_log10()
model_k = train(as.factor(crise) ~  rav, data=df3,
method='svmRadial',
tuneLength = 10,
trControl = control_train)
model_k = train(as.factor(crise) ~  rav, data=df3,
method='svmRadial',
tuneLength = 10,
trControl = control_train)
model_k
ggplot(model_k) + scale_x_log10()
control_train = trainControl(method = 'repeatedcv',
number = 10,
repeats = 10,
savePredictions = T)    # ten fold
model_g = train(as.factor(crise) ~  rav, data=df3,
trControl = control_train, method='rf')
model_g
selectedIndices <- model_g$pred$mtry == 2
selectedIndices <- model_g$pred$mtry == 135
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=M, d=factor(obs, levels = c("R", "M")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
#------ Random Forests
install.packages('plotROC')
#------ Random Forests
library('plotROC')
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=M, d=factor(obs, levels = c("R", "M")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4)))
g
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=M, d=factor(obs, levels = c("R", "M")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4)))
control_train = trainControl(method = 'repeatedcv',
number = 10,
repeats = 2,
summaryFunction=twoClassSummary,
classProbs=T,
savePredictions = T)    # ten fold
model_g = train(as.factor(crise) ~  rav, data=df3,
trControl = control_train, method='rf')
ctrl <- trainControl(method="cv",
summaryFunction=twoClassSummary,
classProbs=T,
savePredictions = T)
model_g = train(as.factor(crise) ~  rav, data=df3,
trControl = ctrl, method='rf')
ctrl <- trainControl(method="cv",
summaryFunction=twoClassSummary,
classProbs=F,
savePredictions = T)
model_g = train(as.factor(crise) ~  rav, data=df3,
trControl = ctrl, method='rf')
control_train = trainControl(method = 'repeatedcv',
number = 10,
repeats = 10,
savePredictions = T)    # ten fold
model_g$pred$pred
model_g$pred
model_g$pred$rowIndex
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=model_g$pred$rowIndex, d=factor(obs, levels = c("R", "M")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4)))
g <- ggplot(model_g$pred[selectedIndices, ], aes(d=factor(obs, levels = c("R", "M")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4)))
View(model_g)
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=M, d=factor(obs, levels = c("R", "M")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g
model_g$pred$1
model_g$pred$pred
model_g$pred$pred[1]
model_g$pred$pred[1,]
model_g$pred$pred==1
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=0, d=factor(obs, levels = c(1, 0)))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4)))
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=0, d=factor(obs, levels = c(1, 0)))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g
model_g
selectedIndices <- model_g$pred$mtry == 68
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=0, d=factor(obs, levels = c(1, 0)))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=0, d=factor(obs, levels = c(1, 0)))) +
geom_roc(n.cuts=0) +
coord_equal()
g
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=0, d=factor(obs, levels = c(1, 0)))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=1, d=factor(obs, levels = c(1, 0)))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g
g
selectedIndices <- model_g$pred$mtry == 68
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=1, d=factor(obs, levels = c(1, 0)))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g
library(MLeval)
install.packages(MLeval)
install.packages('MLeval')
library(MLeval)
res = evalm(model_g)
ctrl <- trainControl(method="cv",
summaryFunction=twoClassSummary,
classProbs=T)
model_g = train(as.factor(crise) ~  rav, data=df3,
trControl = ctrl, method='rf')
model_g = train(as.factor(crise) ~  rav, data=df3,
trControl = ctrl,
preProc=c("center", "scale"),
method='rf')
ctrl <- trainControl(method="cv",
summaryFunction=twoClassSummary,
classProbs=F)
model_g = train(as.factor(crise) ~  rav, data=df3,
trControl = ctrl,
preProc=c("center", "scale"),
method='rf')
res = eval(model_g)
res$roc
res = evalm(model_g)
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=1, d=factor(obs, levels = c("R", "M")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=1, d=factor(obs, levels = c("R", "M")))) +
geom_roc(n.cuts=1) +
coord_equal() +
style_roc()
g
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=1, d=factor(obs, levels = c("0", "1")))) +
geom_roc(n.cuts=1) +
coord_equal() +
style_roc()
g
g <- ggplot(model_g$pred[selectedIndices, ], aes(m=0, d=factor(obs, levels = c("0", "1")))) +
geom_roc(n.cuts=1) +
coord_equal() +
style_roc()
g
library(mlbench)
install.packages(mlbench)
install.packages('mlbench')
library('mlbench')
data("Sonar")
View(Sonar)
source('~/.active-rstudio-document')
ctrl <- trainControl(method="cv", summaryFunction=twoClassSummary, classProbs=T,
savePredictions = T)
rfFit <- train(Class ~ ., data=Sonar, method="rf", preProc=c("center", "scale"),
trControl=ctrl)
rfFit
Sonar$Class
g <- ggplot(rfFit$pred[selectedIndices, ], aes(m=M, d=factor(obs, levels = c("R", "M")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4)))
g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4)))
rfFit
rfFit <- train(Class ~ ., data=Sonar, method="rf", preProc=c("center", "scale"),
trControl=ctrl)
# Select a parameter setting
selectedIndices <- rfFit$pred$mtry == 2
g <- ggplot(rfFit$pred[selectedIndices, ], aes(m=M, d=factor(obs, levels = c("R", "M")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4)))
rfFit$pred[selectedIndices, ]
rfFit$pred[selectedIndices, ]$pred
g <- ggplot(rfFit$pred[selectedIndices, ]$pred, aes(m=M, d=factor(obs, levels = c("R", "M")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g <- ggplot(rfFit$pred[selectedIndices, ], aes(m=M.str, d=factor(obs, levels = c("R", "M")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g + annotate("text", x=0.75, y=0.25, label=paste("AUC =", round((calc_auc(g))$AUC, 4)))
k=rfFit$pred[selectedIndices, ]
View(k)
k=rfFit$pred[selectedIndices, ]
g <- ggplot(rfFit$pred[selectedIndices, ], aes(m=M, d=factor(obs, levels = c("R", "M")))) +
geom_roc(n.cuts=0) +
coord_equal() +
style_roc()
g
g <- ggplot(rfFit$pred[selectedIndices, ], aes(m=M, d=factor(obs, levels = c("R", "M")))) +
geom_roc() +
coord_equal() +
style_roc()
g
xx=model_g$pred[selectedIndices, ]
View(xx)
View(k)
ctrl <- trainControl(method="cv", , classProbs=T,
savePredictions = T)
model_g = train(as.factor(crise) ~  rav, data=df3,
trControl = ctrl, method='rf')
model_g = train(crise ~  rav, data=df3,
trControl = ctrl, method='rf')
model_g
selectedIndices <- model_g$pred$mtry == 68
xx=model_g$pred[selectedIndices, ]
View(xx)
