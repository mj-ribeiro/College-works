f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 30000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 30000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 30000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 300000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 300000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 300000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 300000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 300000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 300000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 500000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 500000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 500000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 500000
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
(t_max - t_min)/n *s
t_max = 300
t_min = 0
n = 500000
s = 0
nn = 100
I = c()
for (j in 1:nn) {
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
I[j] = (t_max - t_min)/n *s
}
mean(I)
sd(I)
hist(I)
for (j in 1:nn) {
s = 0
for (i in 1:n) {
theta = runif(1, min=t_min, max=t_max)
f_ = f(2, 1/3)
s = s + f_
}
I[j] = (t_max - t_min)/n *s
}
mean(I)
sd(I)
hist(I, breaks = 30, col='lightgreen')
hist(I, breaks = 30, col='lightgreen', main='Histogram of Integral values')
m = 1e+5
y = numeric(m)
phi = numeric(m)
curve(rbeta(x, 2, 2))
curve(pbeta(x, 2, 2))
curve(pbeta(x, 2, 20))
curve(pbeta(x, 2, 2))
curve(pbeta(x, 20, 2))
curve(pbeta(x, 10, 2))
curve(pbeta(x, 10, 20))
m = 1e+5
y = numeric(m)
phi = numeric(m)
for(i in 1:m){
phi[i] = rbeta(1, 2, 2)
y[i] = rbinom(1, size = 10, phi[i])
}
phi = rbeta(1, 2, 2)
y = rbinom(1, size = 10, phi)
hist(phi)
hist(y)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 1, 0.3)
rbinom(1, size = 1, 0.3)
rbinom(1, size = 1, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 2, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbinom(1, size = 10, 0.3)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
rbeta(1, 2, 2)
table(y)
phi = rbeta(1, 2, 2)
y = rbinom(1, size = 10, phi)
table(y)
hist(y)
y = rbinom(1, size = 10, phi)
table(y)
phi = rbeta(m, 2, 2)
y = rbinom(m, size = 10, phi)
table(y)
table(y)/m
plot(table(y)/m)
plot(table(y)/m, main='Beta Binomial distribution of y')
plot(table(y)/m, main='Beta Binomial distribution of y', ylabel='Probability')
plot(table(y)/m, main='Beta Binomial distribution of y', ylab='Probability')
plot(table(y)/m, main='Beta Binomial distribution of y')
plot(table(y)/m, main='Beta Binomial distribution of y', ylab='Probability')
plot(table(y)/m, main='Beta Binomial distribution of y', ylab='Probability')
81/256
81/256*1500
500/474.61
1.053497^(-1/4)
81/256*1500*2^(-4)
(1.5*0.03)/0.03
1.5^2
0.76+2.26
0.76+3.78
1/0.987
500^0.25
500^0.25* 1500^(-1/4)
500^0.25* 1500^(-1/4)*3/4
1.054^(-1/4)
81/256*1500
81/256*1500
500/(81/256*1500)
(500/(81/256*1500) )^(-1/4)
500^(1/4)*1500^(-1/4)*(86/256)^(1/4)
500/1500
81/256
0.33333/0.3164
(1500/(81/256*500) )^(-1/4)
(1500/(81/256*500) )
(1500/(81/256*500) )^(-1/4)
81/256*500*2^(-4)
10/17
0.6*17
1/(1-0.68)
120/18
9*0.6
8*0.6
exp(4.76)
exp(4.7592)
0.13*19
exp(4.561)
exp(4.5303)
exp(4.50)
exp(4.486)
#------------------------------------------------------------------------------------------------
#                                Metropolis Hastings
#==============================================================================================
#see: https://d3c33hcgiwev3.cloudfront.net/_caf094bf3db01507bea6305d040883e4_lesson_04.html?Expires=1594252800&Signature=B-XiirBnF2dx1HIxsaxGncbRSB6jldC1ExZ~OSkqMURxzLkh0-7PSLGWQOpzbL-~eEqfAv8~4y91yrKFkQsgZgAYFQSYZdGF7DfleriZCwcnQhme~hf5Ym4Mf1Hvx4AMYMlJ0Sh2fYu4khSLMbuQER6Ej9CqqibkoyBlAlDDJP8_&Key-Pair-Id=APKAJLTNE6QMUY6HBC5A
setwd("D:/Git projects/college_works/Bayesian Simulation")
library(car)
data('Leinhardt')
head('Leinhardt')
head(Leinhardt)
str(head)
str(Leinhardt)
pairs(Leinhardt)
plot(infant ~ income, data=Leinhardt)
hist(infant, data=Leinhardt)
hist(Leinhardt$infant)
hist(Leinhardt$income)
Leinhardt$infant = log(Leinhardt$infant)
Leinhardt$income = log(Leinhardt$income)
data('Leinhardt')
library(car)
data('Leinhardt')
head(Leinhardt)
str(Leinhardt)
Leinhardt$linfant = log(Leinhardt$infant)
Leinhardt$lincome = log(Leinhardt$income)
plot(linfant ~ lincome, data=Leinhardt)
hist(linfant)
hist(Leinhardt$linfant)
exp(4.4)
reg = lm(linfant ~ lincome, data=Leinhardt)
summary(reg)
dat = na.omit(Leinhardt)
exp(4.4256)
library(rjags)
mod1 = 'model{
for(i in 1:n){
y[i] ~ dnorm(mu[i], prec)
mu[i] ~ b[1] + b[2]*log_income[i]
}
for(j in 1:2){
b[j] ~ dnorm(0, 1/1e6)
}
prec ~ dgamma(5/2, 5*10/2)
sig2 = 1/prec
sig = sqrt(sig2)
}'
set.seed(72)
dat_jags = list(y= dat$linfant, n=nrow(dat), log_income= dat$lincome)
pars = c('b', 'sig')
pars = c('b', 'sig')
init = function(){
inits = list('b'=rnorm(2, 0, 100), 'prec'=rgamma(1, 1, 1))
}
mod_j = jags.model(textConnection(mod1), data = dat_jags,
inits = init, n.chains = 3)
mod1 = "model{
for(i in 1:n){
y[i] ~ dnorm(mu[i], prec)
mu[i] ~ b[1] + b[2]*log_income[i]
}
for(j in 1:2){
b[j] ~ dnorm(0, 1/1e6)
}
prec ~ dgamma(5/2, 5*10/2)
sig2 = 1/prec
sig = sqrt(sig2)
}"
set.seed(72)
dat_jags = list(y= dat$linfant, n=nrow(dat), log_income= dat$lincome)
pars = c("b", "sig")
init = function(){
inits = list("b"=rnorm(2, 0, 100), "prec"=rgamma(1, 1, 1))
}
mod_j = jags.model(textConnection(mod1), data = dat_jags,
inits = init, n.chains = 3)
init = function(){
inits = list("b"=rnorm(2, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod_j = jags.model(textConnection(mod1), data = dat_jags,
inits = init, n.chains = 3)
mod1 = "model{
for(i in 1:n){
y[i] ~ dnorm(mu[i], prec)
mu[i] ~ b[1] + b[2]*log_income[i]
}
for(j in 1:2){
b[j] ~ dnorm(0, 1.0/1.0e6)
}
prec ~ dgamma(5/2, 5*10/2)
sig2 = 1/prec
sig = sqrt(sig2)
}"
set.seed(72)
dat_jags = list(y= dat$linfant, n=nrow(dat), log_income= dat$lincome)
pars = c("b", "sig")
init = function(){
inits = list("b"=rnorm(2, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod_j = jags.model(textConnection(mod1), data = dat_jags,
inits = init, n.chains = 3)
init1 = function(){
inits = list("b"=rnorm(2, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod_j = jags.model(textConnection(mod1), data = dat_jags,
inits = init1, n.chains = 3)
init1 = function(){
inits = list("b"=rnorm(2, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod_j = jags.model(textConnection(mod1), data = dat_jags,
inits = init1, n.chains = 3)
dat1 = list(y= dat$linfant, n=nrow(dat), log_income= dat$lincome)
mod_j = jags.model(textConnection(mod1), data = dat1,
inits = init1, n.chains = 3)
mod_str = "model{
for(i in 1:n){
y[i] ~ dnorm(mu[i], prec)
mu[i] ~ b[1] + b[2]*log_income[i]
}
for(j in 1:2){
b[j] ~ dnorm(0, 1.0/1.0e6)
}
prec ~ dgamma(5/2, 5*10/2)
sig2 = 1/prec
sig = sqrt(sig2)
}"
set.seed(72)
dat1 = list(y= dat$linfant, n=nrow(dat), log_income= dat$lincome)
pars = c("b", "sig")
init1 = function(){
inits = list("b"=rnorm(2, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod_j = jags.model(textConnection(mod_str), data = dat1,
inits = init1, n.chains = 3)
mod1_string = "model{
for(i in 1:n){
y[i] ~ dnorm(mu[i], prec)
mu[i] ~ b[1] + b[2]*log_income[i]
}
for(j in 1:2){
b[j] ~ dnorm(0, 1.0/1.0e6)
}
prec ~ dgamma(5/2, 5*10/2)
sig2 = 1.0/prec
sig = sqrt(sig2)
}"
data1_jags = list(y=dat$linfant, n=nrow(dat), log_income= dat$lincome)
params1 = c("b", "sig")
inits1 = function(){
inits = list("b"=rnorm(2, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod_j = jags.model(textConnection(mod_str), data = dat1,
inits = init1, n.chains = 3)
mod_j = jags.model(textConnection(mod_str), data = data1_jags,
inits = inits1, n.chains = 3)
mod1 = jags.model(textConnection(mod_str), data = data1_jags,
inits = inits1, n.chains = 3)
source('D:/Git projects/college_works/Bayesian Simulation/linear_reg.R')
mod1 = jags.model(textConnection(mod1_string), data = data1_jags,
inits = inits1, n.chains = 3)
source('D:/Git projects/college_works/Bayesian Simulation/linear_reg.R')
library(rjags)
library("rjags")
mod1_string = "model{
for(i in 1:n){
y[i] ~ dnorm(mu[i], prec)
mu[i] ~ b[1] + b[2]*log_income[i]
}
for(j in 1:2){
b[j] ~ dnorm(0, 1.0/1.0e6)
}
prec ~ dgamma(5/2, 5*10/2)
sig2 = 1.0/prec
sig = sqrt(sig2)
}"
set.seed(72)
data1_jags = list(y=dat$linfant, n=nrow(dat), log_income= dat$lincome)
params1 = c("b", "sig")
inits1 = function(){
inits = list("b"=rnorm(2, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod1 = jags.model(textConnection(mod1_string), data = data1_jags,
inits = inits1, n.chains = 3)
mod1_string = "model{
for(i in 1:n){
y[i] ~ dnorm(mu[i], prec)
mu[i] = b[1] + b[2]*log_income[i]
}
for(j in 1:2){
b[j] ~ dnorm(0, 1.0/1.0e6)
}
prec ~ dgamma(5/2, 5*10/2)
sig2 = 1.0/prec
sig = sqrt(sig2)
}"
set.seed(72)
data1_jags = list(y=dat$linfant, n=nrow(dat), log_income= dat$lincome)
params1 = c("b", "sig")
inits1 = function(){
inits = list("b"=rnorm(2, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod1 = jags.model(textConnection(mod1_string), data = data1_jags,
inits = inits1, n.chains = 3)
update(mod1, 1000)
mod1_sim = coda.samples(model=mod1,
variable.names = params1,
n.iter = 5e3)
mod1_csim = do.call(rbind, mod1_sim)
View(mod1_sim)
exp(4.369)
exp(4.3652)
exp(4.3507)
exp(4.3388)
