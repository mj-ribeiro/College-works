500/1500
81/256
0.33333/0.3164
(1500/(81/256*500) )^(-1/4)
(1500/(81/256*500) )
(1500/(81/256*500) )^(-1/4)
81/256*500*2^(-4)
10/17
0.6*17
1/(1-0.68)
120/18
9*0.6
8*0.6
exp(4.76)
exp(4.7592)
0.13*19
exp(4.31)
exp(4.3)
exp(4.29)
exp(4.2866)
exp(4.2834)
exp(3.31)
exp(2.14)
exp(3.196)
exp(12.3)
exp(3.196)
exp(3.15)
exp(2.61)
exp(2.6)
exp(2.3819)
exp(2.3196)
exp(2.28)
exp(2.22)
exp(2.2195)
exp(1.95)
exp(1.84)
exp(0.1951)
exp(0.177)
exp(0.14)
exp(0.1491)
exp(0.0969)
exp(0.0674)
exp(0.0627)
exp(0.0556)
exp(0.0532)
exp(0.0532)
exp(0.0531)
exp(0.0491)
exp(0.041)
exp(0.0242)
exp(0.0188)
exp(-0.0173)
pt(0.05, 11)
qt(0.05, 11)
qt(0.95, 11)
dt(0.05, 11)
curve(rt(x, 11))
hist(rt(100, 11))
hist(rt(1000, 11))
hist(rt(1000, 11), probability = T)
curve(dt(x), add=T)
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T, ylim = c(0, 0.6), col='lightgreen')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T, ylim = c(0, 0.5), col='lightgreen')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T, ylim = c(0, 0.45), col='lightgreen')
curve(dt(x, 11), add=T)
pt(0.025, 11)
qt(0.975, 11)
qt(0.975, 5)
qt(0.975, 50)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(1000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(10000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(10000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(10000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(10000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(10000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(10000, 11), probability = T,
ylim = c(0, 0.45),
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(10000, 11), probability = T,
ylim = c(0, 0.45),
breaks=20,
col='lightgreen',
main='Histograma')
curve(dt(x, 11), add=T)
hist(rt(10000, 1), probability = T,
ylim = c(0, 0.45),
breaks=20,
col='lightgreen',
main='Histograma')
hist(rt(10000, 2), probability = T,
ylim = c(0, 0.45),
breaks=20,
col='lightgreen',
main='Histograma')
hist(rt(10000, 3), probability = T,
ylim = c(0, 0.45),
breaks=20,
col='lightgreen',
main='Histograma')
hist(rt(10000, 3), probability = T,
ylim = c(0, 0.45),
breaks=200,
col='lightgreen',
main='Histograma')
exp(0.0294)
exp(0.0293)
exp(0.0289)
2.79*5
2.79*5+2.9
np.exp(-0.0035)
exp(-0.0035)
exp(-0.004)
exp(-0.0035)
setwd("D:/Git projects/college_works/Bayesian Simulation")
library(car)
data('Leinhardt')
head(Leinhardt)
str(Leinhardt)
# plots
pairs(Leinhardt)
plot(infant ~ income, data=Leinhardt)
hist(Leinhardt$infant)
hist(Leinhardt$income)
# log
Leinhardt$linfant = log(Leinhardt$infant)
Leinhardt$lincome = log(Leinhardt$income)
plot(linfant ~ lincome, data=Leinhardt)
hist(Leinhardt$linfant)
# regression
reg = lm(linfant ~ lincome, data=Leinhardt)
summary(reg)
library('olsrr')
reg0 = ols_regress(linfant ~ lincome, data=Leinhardt)
dat = na.omit(Leinhardt)
reg0
print(f'ff')
print('ff {reg0}')
print('ff {reg0}')
print('ff (reg0)')
f(' {reg0}')
install.packages(fstring)
install.packages('fstring')
print('dd', reg0)
print('dd', 2)
print('dd' 2)
print('dd' 2)
print('dd,' 2)
print('dd'{ 2})
print('dd',{2})
print('dd', (2)
print('dd', (2) )
print('dd', (2) )
print('dd', [2] )
# using rjags
library("rjags")
mod1_string = "model{
for(i in 1:n){
y[i] ~ dnorm(mu[i], prec)
mu[i] = b[1] + b[2]*log_income[i]
}
for(j in 1:2){
b[j] ~ dnorm(0, 1.0/1.0e6)
}
prec ~ dgamma(5/2, 5*10/2)
sig2 = 1.0/prec
sig = sqrt(sig2)
}"
set.seed(72)
data1_jags = list(y=dat$linfant, n=nrow(dat), log_income= dat$lincome)
params1 = c("b", "sig")
inits1 = function(){
inits = list("b"=rnorm(2, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod1 = jags.model(textConnection(mod1_string), data = data1_jags,
inits = inits1, n.chains = 3)
update(mod1, 1000)
mod1_sim = coda.samples(model=mod1,
variable.names = params1,
n.iter = 5e3)
mod1_csim = do.call(rbind, mod1_sim)
windows()
plot(mod1_sim)
# diagnostics
gelman.diag(mod1_sim)
autocorr.diag(mod1_sim)
effectiveSize(mod1_sim)
summary(mod1_sim)
data2_jags = list(y=dat$linfant, n=nrow(dat),
log_income= dat$lincome,
is_oil=as.numeric(dat$oil=='yes'))
data2_jags$is_oil
mod2_string = "model{
for(i in 1:n){
y[i] ~ dnorm(mu[i], prec)
mu[i] = b[1] + b[2]*log_income[i] + b[3]*is_oil[i]
}
for(j in 1:3){
b[j] ~ dnorm(0, 1.0/1.0e6)
}
prec ~ dgamma(5/2, 5*10/2)
sig2 = 1.0/prec
sig = sqrt(sig2)
}"
set.seed(75)
data2_jags = list(y=dat$linfant, n=nrow(dat),
log_income= dat$lincome,
is_oil=as.numeric(dat$oil=='yes'))
params2 = c("b", "sig")
inits2 = function(){
inits = list("b"=rnorm(2, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod2 = jags.model(textConnection(mod2_string), data = data2_jags,
inits = inits2, n.chains = 3)
set.seed(75)
data2_jags = list(y=dat$linfant, n=nrow(dat),
log_income= dat$lincome,
is_oil=as.numeric(dat$oil=='yes'))
params2 = c("b", "sig")
inits2 = function(){
inits = list("b"=rnorm(2, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod2 = jags.model(textConnection(mod2_string), data = data2_jags,
inits = inits2, n.chains = 3)
data2_jags = list(y=dat$linfant, n=nrow(dat),
log_income= dat$lincome,
is_oil=as.numeric(dat$oil=='yes'))
params2 = c("b", "sig")
inits2 = function(){
inits = list("b"=rnorm(3, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod2 = jags.model(textConnection(mod2_string), data = data2_jags,
inits = inits2, n.chains = 3)
update(mod2, 1000)
mod2_sim = coda.samples(model=mod1,
variable.names = params1,
n.iter = 5e3)
mod2_csim = do.call(rbind, mod2_sim)
windows()
plot(mod2_sim)
windows()
plot(mod2_sim)
gelman.diag(mod2_sim)
autocorr.diag(mod2_sim)
effectiveSize(mod2_sim)
summary(mod2_sim)
mod2_string = "model{
for(i in 1:n){
y[i] ~ dnorm(mu[i], prec)
mu[i] = b[1] + b[2]*log_income[i] + b[3]*is_oil[i]
}
for(j in 1:3){
b[j] ~ dnorm(0, 1.0/1.0e6)
}
prec ~ dgamma(5/2, 5*10/2)
sig2 = 1.0/prec
sig = sqrt(sig2)
}"
set.seed(75)
data2_jags = list(y=dat$linfant, n=nrow(dat),
log_income= dat$lincome,
is_oil=as.numeric(dat$oil=='yes'))
params2 = c("b", "sig")
inits2 = function(){
inits = list("b"=rnorm(3, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod2 = jags.model(textConnection(mod2_string), data = data2_jags,
inits = inits2, n.chains = 3)
update(mod2, 1000)
mod2_sim = coda.samples(model=mod1,
variable.names = params1,
n.iter = 5e3)
mod2_csim = do.call(rbind, mod2_sim)
# plots' model
windows()
plot(mod2_sim)
data2_jags = list(y=dat$linfant,
log_income= dat$lincome,
is_oil=as.numeric(dat$oil=='yes'))
params2 = c("b", "sig")
inits2 = function(){
inits = list("b"=rnorm(3, 0.0, 100.0),
"prec"=rgamma(1, 1.0, 1.0))
}
mod2 = jags.model(textConnection(mod2_string),
data = data2_jags,
inits = inits2,
n.chains = 3)
mod2_string = "model{
for(i in 1:length(y)){
y[i] ~ dnorm(mu[i], prec)
mu[i] = b[1] + b[2]*log_income[i] + b[3]*is_oil[i]
}
for(j in 1:3){
b[j] ~ dnorm(0, 1.0/1.0e6)
}
prec ~ dgamma(5/2, 5*10/2)
sig2 = 1.0/prec
sig = sqrt(sig2)
}"
set.seed(75)
data2_jags = list(y=dat$linfant,
log_income= dat$lincome,
is_oil=as.numeric(dat$oil=='yes'))
params2 = c("b", "sig")
inits2 = function(){
inits = list("b"=rnorm(3, 0.0, 100.0),
"prec"=rgamma(1, 1.0, 1.0))
}
mod2 = jags.model(textConnection(mod2_string),
data = data2_jags,
inits = inits2,
n.chains = 3)
update(mod2, 1000)
mod2_sim = coda.samples(model=mod1,
variable.names = params1,
n.iter = 5e3)
mod2_csim = do.call(rbind, mod2_sim)
# plots' model
windows()
plot(mod2_sim)
windows()
par(mfrow=c(4,2))
plot(mod2_sim)
mod2_string = "model{
for(i in 1:length(y)){
y[i] ~ dnorm(mu[i], prec)
mu[i] = b[1] + b[2]*log_income[i] + b[3]*is_oil[i]
}
for(j in 1:3){
b[j] ~ dnorm(0.0, 1.0/1.0e6)
}
prec ~ dgamma(5/2, 5*10/2)
sig = sqrt(1/prec)
}"
set.seed(75)
data2_jags = list(y=dat$linfant,
log_income= dat$lincome,
is_oil=as.numeric(dat$oil=="yes"))
params2 = c("b", "sig")
inits2 = function(){
inits = list("b"=rnorm(3, 0.0, 100.0),
"prec"=rgamma(1, 1.0, 1.0))
}
mod2 = jags.model(textConnection(mod2_string),
data = data2_jags,
inits = inits2,
n.chains = 3)
update(mod2, 1000)
mod2_sim = coda.samples(model=mod1,
variable.names = params1,
n.iter = 5e3)
mod2_csim = do.call(rbind, mod2_sim)
# plots' model
windows()
plot(mod2_sim)
set.seed(75)
data2_jags = list(y=dat$linfant,
log_income= dat$lincome,
is_oil=as.numeric(dat$oil=="yes"))
params2 = c("b", "sig")
inits2 = function(){
inits = list("b"=rnorm(3, 0.0, 100.0),
"prec"=rgamma(1, 1.0, 1.0))
}
mod2 = jags.model(textConnection(mod2_string),
data = data2_jags,
inits = inits2,
n.chains = 3)
update(mod2, 1000)
mod2_sim = coda.samples(model=mod1,
variable.names = params2,
n.iter = 5e3)
mod2_csim = do.call(rbind, mod2_sim)
# plots' model
windows()
plot(mod2_sim)
summary(mod2_sim)
b
mod2_string = "model{
for(i in 1:length(y)){
y[i] ~ dnorm(mu[i], prec)
mu[i] = b[1] + b[2]*log_income[i] + b[3]*is_oil[i]
}
for(j in 1:3){
b[j] ~ dnorm(0.0, 1.0/1.0e6)
}
prec ~ dgamma(5/2, 5*10/2)
sig = sqrt(1/prec)
}"
set.seed(75)
data2_jags = list(y=dat$linfant,
log_income= dat$lincome,
is_oil=as.numeric(dat$oil=="yes"))
params2 = c("b", "sig")
inits2 = function(){
inits = list("b"=rnorm(3, 0.0, 100.0),
"prec"=rgamma(1, 1.0, 1.0))
}
mod2 = jags.model(textConnection(mod2_string),
data = data2_jags,
inits = inits2,
n.chains = 3)
update(mod2, 1000)
mod2_sim = coda.samples(model=mod2,
variable.names = params2,
n.iter = 5e3)
mod2_csim = do.call(rbind, mod2_sim)
# plots' model
windows()
plot(mod2_sim)
summary(mod2_sim)
dic.samples(mod1, n.iter = 1e3)
dic.samples(mod2, n.iter = 1e3)
